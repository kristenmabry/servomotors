
bin/lab12.elf:     file format elf32-littlearm


Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000468 	.word	0x20000468
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016f8 	.word	0x080016f8

080001ac <frame_dummy>:
 80001ac:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <frame_dummy+0x24>)
 80001ae:	b510      	push	{r4, lr}
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4808      	ldr	r0, [pc, #32]	; (80001d4 <frame_dummy+0x28>)
 80001b4:	4908      	ldr	r1, [pc, #32]	; (80001d8 <frame_dummy+0x2c>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	4808      	ldr	r0, [pc, #32]	; (80001dc <frame_dummy+0x30>)
 80001bc:	6803      	ldr	r3, [r0, #0]
 80001be:	b903      	cbnz	r3, 80001c2 <frame_dummy+0x16>
 80001c0:	bd10      	pop	{r4, pc}
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <frame_dummy+0x34>)
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0fb      	beq.n	80001c0 <frame_dummy+0x14>
 80001c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80001cc:	4718      	bx	r3
 80001ce:	bf00      	nop
 80001d0:	00000000 	.word	0x00000000
 80001d4:	080016f8 	.word	0x080016f8
 80001d8:	2000046c 	.word	0x2000046c
 80001dc:	20000468 	.word	0x20000468
	...

080001e8 <main>:
float res;
unsigned int reload_value;
int cycle;

int main()
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b084      	sub	sp, #16
 80001ec:	af00      	add	r7, sp, #0
	res = 0.001 / (float)NUM_LEVELS;
 80001ee:	4b9c      	ldr	r3, [pc, #624]	; (8000460 <main+0x278>)
 80001f0:	4a9c      	ldr	r2, [pc, #624]	; (8000464 <main+0x27c>)
 80001f2:	601a      	str	r2, [r3, #0]
	cycle = (float)period / res;
 80001f4:	4b9a      	ldr	r3, [pc, #616]	; (8000460 <main+0x278>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	489b      	ldr	r0, [pc, #620]	; (8000468 <main+0x280>)
 80001fa:	4619      	mov	r1, r3
 80001fc:	f001 f87a 	bl	80012f4 <__aeabi_fdiv>
 8000200:	4603      	mov	r3, r0
 8000202:	4618      	mov	r0, r3
 8000204:	f001 f912 	bl	800142c <__aeabi_f2iz>
 8000208:	4602      	mov	r2, r0
 800020a:	4b98      	ldr	r3, [pc, #608]	; (800046c <main+0x284>)
 800020c:	601a      	str	r2, [r3, #0]
	// cycle = 2;
	reload_value = res * 168000000;									// PWM calculations
 800020e:	4b94      	ldr	r3, [pc, #592]	; (8000460 <main+0x278>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4618      	mov	r0, r3
 8000214:	4996      	ldr	r1, [pc, #600]	; (8000470 <main+0x288>)
 8000216:	f000 ffb9 	bl	800118c <__aeabi_fmul>
 800021a:	4603      	mov	r3, r0
 800021c:	4618      	mov	r0, r3
 800021e:	f001 f92b 	bl	8001478 <__aeabi_f2uiz>
 8000222:	4602      	mov	r2, r0
 8000224:	4b93      	ldr	r3, [pc, #588]	; (8000474 <main+0x28c>)
 8000226:	601a      	str	r2, [r3, #0]

	SetSysClock();																	//set system clock    
 8000228:	f000 f9f2 	bl	8000610 <SetSysClock>
 	gpio_d_init();																	//initialize Port D (LEDs)
 800022c:	f000 fa64 	bl	80006f8 <gpio_d_init>
	gpio_c_init();
 8000230:	f000 fa9c 	bl	800076c <gpio_c_init>
	adc_init();
 8000234:	f000 fab8 	bl	80007a8 <adc_init>
	seg7_init();
 8000238:	f000 fb6c 	bl	8000914 <seg7_init>
 	SysTick_Config((unsigned int)reload_value);			//configure SysTick System Timer
 800023c:	4b8d      	ldr	r3, [pc, #564]	; (8000474 <main+0x28c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f9c9 	bl	80005d8 <SysTick_Config>

	seg7_put(6, 0x7F);	// not used
 8000246:	2006      	movs	r0, #6
 8000248:	217f      	movs	r1, #127	; 0x7f
 800024a:	f000 fb93 	bl	8000974 <seg7_put>

	  
	while(1)																				//loop forever
	{
		/* Get ADC */
		adc_start();																		// start ADC
 800024e:	f000 faf1 	bl	8000834 <adc_start>
		uint32_t q = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	60fb      	str	r3, [r7, #12]

		while (!adc_done())
 8000256:	e002      	b.n	800025e <main+0x76>
		{
			q++;
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	3301      	adds	r3, #1
 800025c:	60fb      	str	r3, [r7, #12]
	{
		/* Get ADC */
		adc_start();																		// start ADC
		uint32_t q = 0;

		while (!adc_done())
 800025e:	f000 faf9 	bl	8000854 <adc_done>
 8000262:	4603      	mov	r3, r0
 8000264:	f083 0301 	eor.w	r3, r3, #1
 8000268:	b2db      	uxtb	r3, r3
 800026a:	2b00      	cmp	r3, #0
 800026c:	d1f4      	bne.n	8000258 <main+0x70>
		{
			q++;
		}
		uint32_t adc_val = adc_get();
 800026e:	f000 fb05 	bl	800087c <adc_get>
 8000272:	6078      	str	r0, [r7, #4]

		/* Set Pulse Width */
		char manualMode = (*pSWs >> 15) & 1;
 8000274:	4b80      	ldr	r3, [pc, #512]	; (8000478 <main+0x290>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	0bdb      	lsrs	r3, r3, #15
 800027c:	b2db      	uxtb	r3, r3
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	70fb      	strb	r3, [r7, #3]
		char controlling_x = *pSWs & 1;
 8000284:	4b7c      	ldr	r3, [pc, #496]	; (8000478 <main+0x290>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	f003 0301 	and.w	r3, r3, #1
 8000290:	70bb      	strb	r3, [r7, #2]
		char controlling_y = (*pSWs >> 1) & 1;
 8000292:	4b79      	ldr	r3, [pc, #484]	; (8000478 <main+0x290>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	085b      	lsrs	r3, r3, #1
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0301 	and.w	r3, r3, #1
 80002a0:	707b      	strb	r3, [r7, #1]
		if (manualMode)
 80002a2:	78fb      	ldrb	r3, [r7, #3]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d017      	beq.n	80002d8 <main+0xf0>
		{
			if (controlling_x)													// if controlling x
 80002a8:	78bb      	ldrb	r3, [r7, #2]
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d008      	beq.n	80002c0 <main+0xd8>
			{
				curr_level_x = (adc_val * (int)NUM_LEVELS / 4096) + (int)NUM_LEVELS; // calculate x level based on ADC
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	22b4      	movs	r2, #180	; 0xb4
 80002b2:	fb02 f303 	mul.w	r3, r2, r3
 80002b6:	0b1b      	lsrs	r3, r3, #12
 80002b8:	33b4      	adds	r3, #180	; 0xb4
 80002ba:	461a      	mov	r2, r3
 80002bc:	4b6f      	ldr	r3, [pc, #444]	; (800047c <main+0x294>)
 80002be:	601a      	str	r2, [r3, #0]
			}
			if (controlling_y) 													// if controlling y
 80002c0:	787b      	ldrb	r3, [r7, #1]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d008      	beq.n	80002d8 <main+0xf0>
			{
				curr_level_y = (adc_val * (int)NUM_LEVELS / 4096) + (int)NUM_LEVELS; // calculate y level based on ADC
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	22b4      	movs	r2, #180	; 0xb4
 80002ca:	fb02 f303 	mul.w	r3, r2, r3
 80002ce:	0b1b      	lsrs	r3, r3, #12
 80002d0:	33b4      	adds	r3, #180	; 0xb4
 80002d2:	461a      	mov	r2, r3
 80002d4:	4b6a      	ldr	r3, [pc, #424]	; (8000480 <main+0x298>)
 80002d6:	601a      	str	r2, [r3, #0]
			}
		}
		

		/* Set 7-Segment Displays */
		seg7_put(7, manualMode ? 0x7F : seg7[10]);		// auto/manual mode
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d102      	bne.n	80002e4 <main+0xfc>
 80002de:	4b69      	ldr	r3, [pc, #420]	; (8000484 <main+0x29c>)
 80002e0:	7a9b      	ldrb	r3, [r3, #10]
 80002e2:	e000      	b.n	80002e6 <main+0xfe>
 80002e4:	237f      	movs	r3, #127	; 0x7f
 80002e6:	2007      	movs	r0, #7
 80002e8:	4619      	mov	r1, r3
 80002ea:	f000 fb43 	bl	8000974 <seg7_put>
		
		// 'u' => 0110 0011 = 0x63
		seg7_put(5, (!manualMode || controlling_y) ? 0x63 : 0x7F);		// controlling y
 80002ee:	78fb      	ldrb	r3, [r7, #3]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d002      	beq.n	80002fa <main+0x112>
 80002f4:	787b      	ldrb	r3, [r7, #1]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <main+0x116>
 80002fa:	2363      	movs	r3, #99	; 0x63
 80002fc:	e000      	b.n	8000300 <main+0x118>
 80002fe:	237f      	movs	r3, #127	; 0x7f
 8000300:	2005      	movs	r0, #5
 8000302:	4619      	mov	r1, r3
 8000304:	f000 fb36 	bl	8000974 <seg7_put>
		// 'L' = 0100 0111 = 0x47
		seg7_put(4, (!manualMode || controlling_x) ? 0x47 : 0x7F);		// controlling x
 8000308:	78fb      	ldrb	r3, [r7, #3]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d002      	beq.n	8000314 <main+0x12c>
 800030e:	78bb      	ldrb	r3, [r7, #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <main+0x130>
 8000314:	2347      	movs	r3, #71	; 0x47
 8000316:	e000      	b.n	800031a <main+0x132>
 8000318:	237f      	movs	r3, #127	; 0x7f
 800031a:	2004      	movs	r0, #4
 800031c:	4619      	mov	r1, r3
 800031e:	f000 fb29 	bl	8000974 <seg7_put>

		int display = (curr_level_y - ((int)NUM_LEVELS * 1.5)) * 180 / (int)NUM_LEVELS; // convert level to range 0 - 90 degrees
 8000322:	4b57      	ldr	r3, [pc, #348]	; (8000480 <main+0x298>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fc90 	bl	8000c4c <__aeabi_i2d>
 800032c:	4602      	mov	r2, r0
 800032e:	460b      	mov	r3, r1
 8000330:	4610      	mov	r0, r2
 8000332:	4619      	mov	r1, r3
 8000334:	a348      	add	r3, pc, #288	; (adr r3, 8000458 <main+0x270>)
 8000336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800033a:	f000 fb39 	bl	80009b0 <__aeabi_dsub>
 800033e:	4602      	mov	r2, r0
 8000340:	460b      	mov	r3, r1
 8000342:	4610      	mov	r0, r2
 8000344:	4619      	mov	r1, r3
 8000346:	f04f 0200 	mov.w	r2, #0
 800034a:	4b4f      	ldr	r3, [pc, #316]	; (8000488 <main+0x2a0>)
 800034c:	f000 fce4 	bl	8000d18 <__aeabi_dmul>
 8000350:	4602      	mov	r2, r0
 8000352:	460b      	mov	r3, r1
 8000354:	4610      	mov	r0, r2
 8000356:	4619      	mov	r1, r3
 8000358:	f04f 0200 	mov.w	r2, #0
 800035c:	4b4a      	ldr	r3, [pc, #296]	; (8000488 <main+0x2a0>)
 800035e:	f000 fe05 	bl	8000f6c <__aeabi_ddiv>
 8000362:	4602      	mov	r2, r0
 8000364:	460b      	mov	r3, r1
 8000366:	4610      	mov	r0, r2
 8000368:	4619      	mov	r1, r3
 800036a:	f000 fee7 	bl	800113c <__aeabi_d2iz>
 800036e:	4603      	mov	r3, r0
 8000370:	60bb      	str	r3, [r7, #8]
		if (display < 0)
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	2b00      	cmp	r3, #0
 8000376:	da02      	bge.n	800037e <main+0x196>
		{
			display *= -1;
 8000378:	68bb      	ldr	r3, [r7, #8]
 800037a:	425b      	negs	r3, r3
 800037c:	60bb      	str	r3, [r7, #8]
		}
		seg7_put(3, seg7[display / 10]); 										// y level tens
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	4a42      	ldr	r2, [pc, #264]	; (800048c <main+0x2a4>)
 8000382:	fb82 1203 	smull	r1, r2, r2, r3
 8000386:	1092      	asrs	r2, r2, #2
 8000388:	17db      	asrs	r3, r3, #31
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	4a3d      	ldr	r2, [pc, #244]	; (8000484 <main+0x29c>)
 800038e:	5cd3      	ldrb	r3, [r2, r3]
 8000390:	2003      	movs	r0, #3
 8000392:	4619      	mov	r1, r3
 8000394:	f000 faee 	bl	8000974 <seg7_put>
		seg7_put(2, seg7[display % 10]); 										// y level ones
 8000398:	68b9      	ldr	r1, [r7, #8]
 800039a:	4b3c      	ldr	r3, [pc, #240]	; (800048c <main+0x2a4>)
 800039c:	fb83 2301 	smull	r2, r3, r3, r1
 80003a0:	109a      	asrs	r2, r3, #2
 80003a2:	17cb      	asrs	r3, r1, #31
 80003a4:	1ad2      	subs	r2, r2, r3
 80003a6:	4613      	mov	r3, r2
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	1aca      	subs	r2, r1, r3
 80003b0:	4b34      	ldr	r3, [pc, #208]	; (8000484 <main+0x29c>)
 80003b2:	5c9b      	ldrb	r3, [r3, r2]
 80003b4:	2002      	movs	r0, #2
 80003b6:	4619      	mov	r1, r3
 80003b8:	f000 fadc 	bl	8000974 <seg7_put>
		display = (curr_level_x - ((int)NUM_LEVELS * 1.5)) * 180 / (int)NUM_LEVELS; // convert level to range 0 - 90 degrees
 80003bc:	4b2f      	ldr	r3, [pc, #188]	; (800047c <main+0x294>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 fc43 	bl	8000c4c <__aeabi_i2d>
 80003c6:	4602      	mov	r2, r0
 80003c8:	460b      	mov	r3, r1
 80003ca:	4610      	mov	r0, r2
 80003cc:	4619      	mov	r1, r3
 80003ce:	a322      	add	r3, pc, #136	; (adr r3, 8000458 <main+0x270>)
 80003d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003d4:	f000 faec 	bl	80009b0 <__aeabi_dsub>
 80003d8:	4602      	mov	r2, r0
 80003da:	460b      	mov	r3, r1
 80003dc:	4610      	mov	r0, r2
 80003de:	4619      	mov	r1, r3
 80003e0:	f04f 0200 	mov.w	r2, #0
 80003e4:	4b28      	ldr	r3, [pc, #160]	; (8000488 <main+0x2a0>)
 80003e6:	f000 fc97 	bl	8000d18 <__aeabi_dmul>
 80003ea:	4602      	mov	r2, r0
 80003ec:	460b      	mov	r3, r1
 80003ee:	4610      	mov	r0, r2
 80003f0:	4619      	mov	r1, r3
 80003f2:	f04f 0200 	mov.w	r2, #0
 80003f6:	4b24      	ldr	r3, [pc, #144]	; (8000488 <main+0x2a0>)
 80003f8:	f000 fdb8 	bl	8000f6c <__aeabi_ddiv>
 80003fc:	4602      	mov	r2, r0
 80003fe:	460b      	mov	r3, r1
 8000400:	4610      	mov	r0, r2
 8000402:	4619      	mov	r1, r3
 8000404:	f000 fe9a 	bl	800113c <__aeabi_d2iz>
 8000408:	4603      	mov	r3, r0
 800040a:	60bb      	str	r3, [r7, #8]
		if (display < 0)
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	2b00      	cmp	r3, #0
 8000410:	da02      	bge.n	8000418 <main+0x230>
		{
			display *= -1;
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	425b      	negs	r3, r3
 8000416:	60bb      	str	r3, [r7, #8]
		}
		seg7_put(1, seg7[display / 10]); 										// x level tens
 8000418:	68bb      	ldr	r3, [r7, #8]
 800041a:	4a1c      	ldr	r2, [pc, #112]	; (800048c <main+0x2a4>)
 800041c:	fb82 1203 	smull	r1, r2, r2, r3
 8000420:	1092      	asrs	r2, r2, #2
 8000422:	17db      	asrs	r3, r3, #31
 8000424:	1ad3      	subs	r3, r2, r3
 8000426:	4a17      	ldr	r2, [pc, #92]	; (8000484 <main+0x29c>)
 8000428:	5cd3      	ldrb	r3, [r2, r3]
 800042a:	2001      	movs	r0, #1
 800042c:	4619      	mov	r1, r3
 800042e:	f000 faa1 	bl	8000974 <seg7_put>
		seg7_put(0, seg7[display % 10]);										// x level ones
 8000432:	68b9      	ldr	r1, [r7, #8]
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <main+0x2a4>)
 8000436:	fb83 2301 	smull	r2, r3, r3, r1
 800043a:	109a      	asrs	r2, r3, #2
 800043c:	17cb      	asrs	r3, r1, #31
 800043e:	1ad2      	subs	r2, r2, r3
 8000440:	4613      	mov	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	1aca      	subs	r2, r1, r3
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <main+0x29c>)
 800044c:	5c9b      	ldrb	r3, [r3, r2]
 800044e:	2000      	movs	r0, #0
 8000450:	4619      	mov	r1, r3
 8000452:	f000 fa8f 	bl	8000974 <seg7_put>
			
	} // end while loop
 8000456:	e6fa      	b.n	800024e <main+0x66>
 8000458:	00000000 	.word	0x00000000
 800045c:	4070e000 	.word	0x4070e000
 8000460:	2000048c 	.word	0x2000048c
 8000464:	36ba69dc 	.word	0x36ba69dc
 8000468:	3ca3d70a 	.word	0x3ca3d70a
 800046c:	20000484 	.word	0x20000484
 8000470:	4d2037a0 	.word	0x4d2037a0
 8000474:	20000488 	.word	0x20000488
 8000478:	20000014 	.word	0x20000014
 800047c:	20000020 	.word	0x20000020
 8000480:	20000028 	.word	0x20000028
 8000484:	20000000 	.word	0x20000000
 8000488:	40668000 	.word	0x40668000
 800048c:	66666667 	.word	0x66666667

08000490 <SysTick_Handler>:

  return 0;
}

void SysTick_Handler (void)     									//ISR - SysTick Interrupt Service Routine
{    
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
	/* Update Automatic Level */
	int manualMode = (*pSWs >> 15) & 1;
 8000496:	4b46      	ldr	r3, [pc, #280]	; (80005b0 <SysTick_Handler+0x120>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	0bdb      	lsrs	r3, r3, #15
 800049e:	f003 0301 	and.w	r3, r3, #1
 80004a2:	607b      	str	r3, [r7, #4]
	if (auto_counter == (int)AUTO_CYCLE && !manualMode) // if automatic mode & 1 auto cycle has passed
 80004a4:	4b43      	ldr	r3, [pc, #268]	; (80005b4 <SysTick_Handler+0x124>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d13b      	bne.n	8000524 <SysTick_Handler+0x94>
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d138      	bne.n	8000524 <SysTick_Handler+0x94>
	{
			curr_level_x += x_dir;										// increment/decrement x level
 80004b2:	4b41      	ldr	r3, [pc, #260]	; (80005b8 <SysTick_Handler+0x128>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	4b41      	ldr	r3, [pc, #260]	; (80005bc <SysTick_Handler+0x12c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4413      	add	r3, r2
 80004bc:	4a3e      	ldr	r2, [pc, #248]	; (80005b8 <SysTick_Handler+0x128>)
 80004be:	6013      	str	r3, [r2, #0]
			if (!(curr_level_x % (int)NUM_LEVELS))		// if at max level, change direction
 80004c0:	4b3d      	ldr	r3, [pc, #244]	; (80005b8 <SysTick_Handler+0x128>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a3e      	ldr	r2, [pc, #248]	; (80005c0 <SysTick_Handler+0x130>)
 80004c6:	fb83 0102 	smull	r0, r1, r3, r2
 80004ca:	185a      	adds	r2, r3, r1
 80004cc:	11d1      	asrs	r1, r2, #7
 80004ce:	17da      	asrs	r2, r3, #31
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	21b4      	movs	r1, #180	; 0xb4
 80004d4:	fb01 f202 	mul.w	r2, r1, r2
 80004d8:	1a9a      	subs	r2, r3, r2
 80004da:	2a00      	cmp	r2, #0
 80004dc:	d104      	bne.n	80004e8 <SysTick_Handler+0x58>
			{
				x_dir *= -1;	
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <SysTick_Handler+0x12c>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	425b      	negs	r3, r3
 80004e4:	4a35      	ldr	r2, [pc, #212]	; (80005bc <SysTick_Handler+0x12c>)
 80004e6:	6013      	str	r3, [r2, #0]
			}

			curr_level_y += y_dir;										// increment/decrement y level
 80004e8:	4b36      	ldr	r3, [pc, #216]	; (80005c4 <SysTick_Handler+0x134>)
 80004ea:	681a      	ldr	r2, [r3, #0]
 80004ec:	4b36      	ldr	r3, [pc, #216]	; (80005c8 <SysTick_Handler+0x138>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4413      	add	r3, r2
 80004f2:	4a34      	ldr	r2, [pc, #208]	; (80005c4 <SysTick_Handler+0x134>)
 80004f4:	6013      	str	r3, [r2, #0]
			if (!(curr_level_y % (int)NUM_LEVELS))		// if at max level, change direction
 80004f6:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <SysTick_Handler+0x134>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4a31      	ldr	r2, [pc, #196]	; (80005c0 <SysTick_Handler+0x130>)
 80004fc:	fb83 0102 	smull	r0, r1, r3, r2
 8000500:	185a      	adds	r2, r3, r1
 8000502:	11d1      	asrs	r1, r2, #7
 8000504:	17da      	asrs	r2, r3, #31
 8000506:	1a8a      	subs	r2, r1, r2
 8000508:	21b4      	movs	r1, #180	; 0xb4
 800050a:	fb01 f202 	mul.w	r2, r1, r2
 800050e:	1a9a      	subs	r2, r3, r2
 8000510:	2a00      	cmp	r2, #0
 8000512:	d104      	bne.n	800051e <SysTick_Handler+0x8e>
			{
				y_dir *= -1;	
 8000514:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <SysTick_Handler+0x138>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	425b      	negs	r3, r3
 800051a:	4a2b      	ldr	r2, [pc, #172]	; (80005c8 <SysTick_Handler+0x138>)
 800051c:	6013      	str	r3, [r2, #0]
			}
			auto_counter = 0;
 800051e:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <SysTick_Handler+0x124>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
	}

	if (!manualMode && !(counter % (int)cycle))
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d10f      	bne.n	800054a <SysTick_Handler+0xba>
 800052a:	4b28      	ldr	r3, [pc, #160]	; (80005cc <SysTick_Handler+0x13c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <SysTick_Handler+0x140>)
 8000530:	6812      	ldr	r2, [r2, #0]
 8000532:	fb93 f1f2 	sdiv	r1, r3, r2
 8000536:	fb02 f201 	mul.w	r2, r2, r1
 800053a:	1a9b      	subs	r3, r3, r2
 800053c:	2b00      	cmp	r3, #0
 800053e:	d104      	bne.n	800054a <SysTick_Handler+0xba>
	{
		auto_counter++;
 8000540:	4b1c      	ldr	r3, [pc, #112]	; (80005b4 <SysTick_Handler+0x124>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <SysTick_Handler+0x124>)
 8000548:	6013      	str	r3, [r2, #0]
	}

	/* Update Servo Motors */
	char x_on = (counter % (int)cycle) < curr_level_x;
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <SysTick_Handler+0x13c>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SysTick_Handler+0x140>)
 8000550:	6812      	ldr	r2, [r2, #0]
 8000552:	fb93 f1f2 	sdiv	r1, r3, r2
 8000556:	fb02 f201 	mul.w	r2, r2, r1
 800055a:	1a9a      	subs	r2, r3, r2
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <SysTick_Handler+0x128>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	bfb4      	ite	lt
 8000564:	2301      	movlt	r3, #1
 8000566:	2300      	movge	r3, #0
 8000568:	b2db      	uxtb	r3, r3
 800056a:	70fb      	strb	r3, [r7, #3]
	char y_on = (counter % (int)cycle) < curr_level_y;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <SysTick_Handler+0x13c>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a17      	ldr	r2, [pc, #92]	; (80005d0 <SysTick_Handler+0x140>)
 8000572:	6812      	ldr	r2, [r2, #0]
 8000574:	fb93 f1f2 	sdiv	r1, r3, r2
 8000578:	fb02 f201 	mul.w	r2, r2, r1
 800057c:	1a9a      	subs	r2, r3, r2
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <SysTick_Handler+0x134>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	429a      	cmp	r2, r3
 8000584:	bfb4      	ite	lt
 8000586:	2301      	movlt	r3, #1
 8000588:	2300      	movge	r3, #0
 800058a:	b2db      	uxtb	r3, r3
 800058c:	70bb      	strb	r3, [r7, #2]
	*pLEDs = x_on + (y_on << 1);
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <SysTick_Handler+0x144>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	78f9      	ldrb	r1, [r7, #3]
 8000594:	78ba      	ldrb	r2, [r7, #2]
 8000596:	0052      	lsls	r2, r2, #1
 8000598:	440a      	add	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
	counter++;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <SysTick_Handler+0x13c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <SysTick_Handler+0x13c>)
 80005a4:	6013      	str	r3, [r2, #0]
}
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	20000014 	.word	0x20000014
 80005b4:	2000001c 	.word	0x2000001c
 80005b8:	20000020 	.word	0x20000020
 80005bc:	20000024 	.word	0x20000024
 80005c0:	b60b60b7 	.word	0xb60b60b7
 80005c4:	20000028 	.word	0x20000028
 80005c8:	2000002c 	.word	0x2000002c
 80005cc:	20000018 	.word	0x20000018
 80005d0:	20000484 	.word	0x20000484
 80005d4:	20000010 	.word	0x20000010

080005d8 <SysTick_Config>:
	unsigned int CALIB;
};


unsigned int SysTick_Config(unsigned int ticks)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  
/* set reload register */ 
  SysTick->LOAD  =  ticks & ~(~0 << 24);		/* set reload register - don't allow bigger than 2^24-1! */
 80005e0:	4b0a      	ldr	r3, [pc, #40]	; (800060c <SysTick_Config+0x34>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	605a      	str	r2, [r3, #4]

  SysTick->VAL   = 0;												/* Load the SysTick Counter Value */
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <SysTick_Config+0x34>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  
  SysTick->CTRL  = 0b111;										/* Clock source is processor clock, Enable SysTick IRQ, and enable SysTick Timer Counter */
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <SysTick_Config+0x34>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2207      	movs	r2, #7
 80005fa:	601a      	str	r2, [r3, #0]
   
  return (0);                           		/* Function successful but we won't check */                          
 80005fc:	2300      	movs	r3, #0
}
 80005fe:	4618      	mov	r0, r3
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000030 	.word	0x20000030

08000610 <SetSysClock>:

  /******************************************************************************/
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}

  ldr r7,=#RCC_BASE
 8000612:	4f26      	ldr	r7, [pc, #152]	; (80006ac <fail_startup+0x4>)

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
 8000614:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_HSEON
 8000616:	4d26      	ldr	r5, [pc, #152]	; (80006b0 <fail_startup+0x8>)
    orr r4,r5
 8000618:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 800061c:	603c      	str	r4, [r7, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <fail_startup+0xc>)

08000620 <Wait_HSE_Ready>:
  
    Wait_HSE_Ready:

      subs r3,#1
 8000620:	3b01      	subs	r3, #1
      beq  fail_startup
 8000622:	d041      	beq.n	80006a8 <fail_startup>
    
      ldr  r4,[r7,#RCC_CR]
 8000624:	683c      	ldr	r4, [r7, #0]
      ldr  r5,=#RCC_CR_HSERDY
 8000626:	4d24      	ldr	r5, [pc, #144]	; (80006b8 <fail_startup+0x10>)
      ands r4,r5
 8000628:	402c      	ands	r4, r5
      beq  Wait_HSE_Ready
 800062a:	d0f9      	beq.n	8000620 <Wait_HSE_Ready>

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
 800062c:	6c3c      	ldr	r4, [r7, #64]	; 0x40
    ldr r5,=#RCC_APB1ENR_PWREN
 800062e:	4d23      	ldr	r5, [pc, #140]	; (80006bc <fail_startup+0x14>)
    orr r4,r5
 8000630:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_APB1ENR]
 8000634:	643c      	str	r4, [r7, #64]	; 0x40
    

  ldr r7,=#PWR_BASE
 8000636:	4f22      	ldr	r7, [pc, #136]	; (80006c0 <fail_startup+0x18>)
    
    ldr r4,[r7,#PWR_CR]
 8000638:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#PWR_CR_PMODE
 800063a:	4d22      	ldr	r5, [pc, #136]	; (80006c4 <fail_startup+0x1c>)
    orr r4,r5
 800063c:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#PWR_CR]
 8000640:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 8000642:	4f1a      	ldr	r7, [pc, #104]	; (80006ac <fail_startup+0x4>)
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
 8000644:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 8000646:	4d20      	ldr	r5, [pc, #128]	; (80006c8 <fail_startup+0x20>)
    orr r4,r5
 8000648:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 800064c:	60bc      	str	r4, [r7, #8]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
 800064e:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 8000650:	4d1e      	ldr	r5, [pc, #120]	; (80006cc <fail_startup+0x24>)
    orr r4,r5
 8000652:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000656:	60bc      	str	r4, [r7, #8]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
 8000658:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 800065a:	4d1d      	ldr	r5, [pc, #116]	; (80006d0 <fail_startup+0x28>)
    orr r4,r5
 800065c:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000660:	60bc      	str	r4, [r7, #8]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 8000662:	4c1c      	ldr	r4, [pc, #112]	; (80006d4 <fail_startup+0x2c>)
    str r4,[r7,#RCC_PLLCFGR]
 8000664:	607c      	str	r4, [r7, #4]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
 8000666:	683c      	ldr	r4, [r7, #0]
    ldr r5,=#RCC_CR_PLLON
 8000668:	4d1b      	ldr	r5, [pc, #108]	; (80006d8 <fail_startup+0x30>)
    orr r4,r5
 800066a:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CR]
 800066e:	603c      	str	r4, [r7, #0]

08000670 <Wait_PLL_Ready>:
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
 8000670:	683c      	ldr	r4, [r7, #0]
      ldr r5,=#RCC_CR_PLLRDY
 8000672:	4d1a      	ldr	r5, [pc, #104]	; (80006dc <fail_startup+0x34>)
      ands r4,r5
 8000674:	402c      	ands	r4, r5
      beq Wait_PLL_Ready
 8000676:	d0fb      	beq.n	8000670 <Wait_PLL_Ready>
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 8000678:	4f19      	ldr	r7, [pc, #100]	; (80006e0 <fail_startup+0x38>)

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 800067a:	4c1a      	ldr	r4, [pc, #104]	; (80006e4 <fail_startup+0x3c>)
    str r4,[r7,#FLASH_ACR]
 800067c:	603c      	str	r4, [r7, #0]

  ldr r7,=#RCC_BASE
 800067e:	4f0b      	ldr	r7, [pc, #44]	; (80006ac <fail_startup+0x4>)
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
 8000680:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#~(RCC_CFGR_SW)
 8000682:	4d19      	ldr	r5, [pc, #100]	; (80006e8 <fail_startup+0x40>)
    and r4,r5
 8000684:	ea04 0405 	and.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000688:	60bc      	str	r4, [r7, #8]

    ldr r4,[r7,#RCC_CFGR]
 800068a:	68bc      	ldr	r4, [r7, #8]
    ldr r5,=#RCC_CFGR_SW_PLL
 800068c:	4d17      	ldr	r5, [pc, #92]	; (80006ec <fail_startup+0x44>)
    orr r4,r5
 800068e:	ea44 0405 	orr.w	r4, r4, r5
    str r4,[r7,#RCC_CFGR]
 8000692:	60bc      	str	r4, [r7, #8]

08000694 <Wait_PLL>:
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
 8000694:	68bc      	ldr	r4, [r7, #8]
      ldr r5,=#RCC_CFGR_SWS
 8000696:	4d16      	ldr	r5, [pc, #88]	; (80006f0 <fail_startup+0x48>)
      and r4,r5
 8000698:	ea04 0405 	and.w	r4, r4, r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 800069c:	4d15      	ldr	r5, [pc, #84]	; (80006f4 <fail_startup+0x4c>)
      cmp r4,r5
 800069e:	42ac      	cmp	r4, r5
      bne Wait_PLL
 80006a0:	d1f8      	bne.n	8000694 <Wait_PLL>
   
    pop {r4,r5,r6,r7,lr}
 80006a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    
    bx lr
 80006a6:	4770      	bx	lr

080006a8 <fail_startup>:
  
  fail_startup:
    
    b fail_startup
 80006a8:	e7fe      	b.n	80006a8 <fail_startup>
 80006aa:	0000      	.short	0x0000
  /*            PLL (clocked by HSE) used as System clock source                */
  /******************************************************************************/

  push {r4,r5,r6,r7,lr}

  ldr r7,=#RCC_BASE
 80006ac:	40023800 	.word	0x40023800

    /* Enable HSE */
  
    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_HSEON
 80006b0:	00010000 	.word	0x00010000
    orr r4,r5
    str r4,[r7,#RCC_CR]
 
  /* Wait till HSE is ready and if Time out is reached exit */

    ldr r3,=#0x500
 80006b4:	00000500 	.word	0x00000500

      subs r3,#1
      beq  fail_startup
    
      ldr  r4,[r7,#RCC_CR]
      ldr  r5,=#RCC_CR_HSERDY
 80006b8:	00020000 	.word	0x00020000
      beq  Wait_HSE_Ready

      /* Enable high performance mode, System frequency up to 168 MHz */
    
    ldr r4,[r7,#RCC_APB1ENR]
    ldr r5,=#RCC_APB1ENR_PWREN
 80006bc:	10000000 	.word	0x10000000
    orr r4,r5
    str r4,[r7,#RCC_APB1ENR]
    

  ldr r7,=#PWR_BASE
 80006c0:	40007000 	.word	0x40007000
    
    ldr r4,[r7,#PWR_CR]
    ldr r5,=#PWR_CR_PMODE
 80006c4:	00004000 	.word	0x00004000
  ldr r7,=#RCC_BASE
    
    /* HCLK = SYSCLK / 1*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_HPRE_DIV1
 80006c8:	00000000 	.word	0x00000000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK2 = HCLK / 2*/
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE2_DIV2
 80006cc:	00008000 	.word	0x00008000
    str r4,[r7,#RCC_CFGR]
    
    /* PCLK1 = HCLK / 4*/

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_PPRE1_DIV4
 80006d0:	00001400 	.word	0x00001400
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    /* Configure the main PLL */

    ldr r4,=#( PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) )              
 80006d4:	07405408 	.word	0x07405408
    str r4,[r7,#RCC_PLLCFGR]
    
    /* Enable the main PLL */

    ldr r4,[r7,#RCC_CR]
    ldr r5,=#RCC_CR_PLLON
 80006d8:	01000000 	.word	0x01000000
    str r4,[r7,#RCC_CR]
    
    
    Wait_PLL_Ready:
      ldr r4,[r7,#RCC_CR]
      ldr r5,=#RCC_CR_PLLRDY
 80006dc:	02000000 	.word	0x02000000
      ands r4,r5
      beq Wait_PLL_Ready
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */

  ldr r7,=#FLASH_R_BASE   
 80006e0:	40023c00 	.word	0x40023c00

    ldr r4,=#(FLASH_ACR_ICEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS)
 80006e4:	00000605 	.word	0x00000605
  ldr r7,=#RCC_BASE
  
    /* Select the main PLL as system clock source */
    
    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#~(RCC_CFGR_SW)
 80006e8:	fffffffc 	.word	0xfffffffc
    and r4,r5
    str r4,[r7,#RCC_CFGR]

    ldr r4,[r7,#RCC_CFGR]
    ldr r5,=#RCC_CFGR_SW_PLL
 80006ec:	00000002 	.word	0x00000002
    orr r4,r5
    str r4,[r7,#RCC_CFGR]
    
    Wait_PLL:
      ldr r4,[r7,#RCC_CFGR]
      ldr r5,=#RCC_CFGR_SWS
 80006f0:	0000000c 	.word	0x0000000c
      and r4,r5
      ldr r5,=#RCC_CFGR_SWS_PLL
 80006f4:	00000008 	.word	0x00000008

080006f8 <gpio_d_init>:

  .text

  FUNCTION gpio_d_init,global		// initialize 16 bits of Port D to outputs

    push {lr}
 80006f8:	b500      	push	{lr}

		mov	r0,#3										// send 2 as argument to rcc_gpio_enable function
 80006fa:	f04f 0003 	mov.w	r0, #3
		bl	rcc_gpio_enable					// call rcc_gpio_enable
 80006fe:	f000 f825 	bl	800074c <rcc_gpio_enable>

		ldr	r3,=#GPIOD_BASE					// r3 = GPIO PORT D base address
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <gpio_d_init+0x24>)

		ldr r2,=#0x00000000					// r2 = 0
 8000704:	4a06      	ldr	r2, [pc, #24]	; (8000720 <gpio_d_init+0x28>)
		str	r2,[r3,#GPIO_PUPDR]			// clear Port D PUPD register
 8000706:	60da      	str	r2, [r3, #12]
		str	r2,[r3,#GPIO_OTYPER]		// clear Port D Type register
 8000708:	605a      	str	r2, [r3, #4]
		str	r2,[r3,#GPIO_ODR]				// clear Port D ouput data register
 800070a:	615a      	str	r2, [r3, #20]

		ldr	r2,=#0x55555555						// set all 16 bits of Port D to outputs
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <gpio_d_init+0x2c>)
		str	r2,[r3,#GPIO_MODER]
 800070e:	601a      	str	r2, [r3, #0]

		ldr	r2,=#0xffffffff					// write 0xffffffff to Port D speed register
 8000710:	4a05      	ldr	r2, [pc, #20]	; (8000728 <gpio_d_init+0x30>)
		str	r2,[r3,#GPIO_OSPEEDR]
 8000712:	609a      	str	r2, [r3, #8]

    pop {lr}
 8000714:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000718:	4770      	bx	lr
 800071a:	0000      	.short	0x0000
    push {lr}

		mov	r0,#3										// send 2 as argument to rcc_gpio_enable function
		bl	rcc_gpio_enable					// call rcc_gpio_enable

		ldr	r3,=#GPIOD_BASE					// r3 = GPIO PORT D base address
 800071c:	40020c00 	.word	0x40020c00

		ldr r2,=#0x00000000					// r2 = 0
 8000720:	00000000 	.word	0x00000000
		str	r2,[r3,#GPIO_PUPDR]			// clear Port D PUPD register
		str	r2,[r3,#GPIO_OTYPER]		// clear Port D Type register
		str	r2,[r3,#GPIO_ODR]				// clear Port D ouput data register

		ldr	r2,=#0x55555555						// set all 16 bits of Port D to outputs
 8000724:	55555555 	.word	0x55555555
		str	r2,[r3,#GPIO_MODER]

		ldr	r2,=#0xffffffff					// write 0xffffffff to Port D speed register
 8000728:	ffffffff 	.word	0xffffffff

0800072c <gpio_d_put>:
  ENDFUNC gpio_d_init


	FUNCTION gpio_d_put,global		// put a value out to the 16 bits of Port D outputs

		push {lr}
 800072c:	b500      	push	{lr}

		ldr	r3,=#GPIOD_BASE					// load r3 with base address of GPIO Port D
 800072e:	4b02      	ldr	r3, [pc, #8]	; (8000738 <gpio_d_put+0xc>)

		str	r0,[r3,#GPIO_ODR]				// write r0 (function arg) to GPIO Port D output
 8000730:	6158      	str	r0, [r3, #20]

		pop {lr}
 8000732:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 8000736:	4770      	bx	lr

	FUNCTION gpio_d_put,global		// put a value out to the 16 bits of Port D outputs

		push {lr}

		ldr	r3,=#GPIOD_BASE					// load r3 with base address of GPIO Port D
 8000738:	40020c00 	.word	0x40020c00

0800073c <gpio_d_get_current>:

	ENDFUNC gpio_d_put

	FUNCTION gpio_d_get_current,global

		push	{lr}
 800073c:	b500      	push	{lr}

		ldr		r3,=#GPIOD_BASE
 800073e:	4b02      	ldr	r3, [pc, #8]	; (8000748 <gpio_d_get_current+0xc>)
		ldr		r0,[r3,#GPIO_ODR]		// load Port D ODR into r0
 8000740:	6958      	ldr	r0, [r3, #20]

		pop		{lr}
 8000742:	f85d eb04 	ldr.w	lr, [sp], #4
		bx		lr
 8000746:	4770      	bx	lr

	FUNCTION gpio_d_get_current,global

		push	{lr}

		ldr		r3,=#GPIOD_BASE
 8000748:	40020c00 	.word	0x40020c00

0800074c <rcc_gpio_enable>:
   .thumb_func
   .type       rcc_gpio_enable, %function

rcc_gpio_enable:

  mov r3,#4
 800074c:	f04f 0304 	mov.w	r3, #4
  cmp r0,r3
 8000750:	4298      	cmp	r0, r3
  bgt skip_enable
 8000752:	dc08      	bgt.n	8000766 <skip_enable>
    
    ldr r3,=RCC_BASE
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <skip_enable+0x2>)
    ldr r1,[r3, #RCC_AHB1ENR]
 8000756:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#1
 8000758:	f04f 0201 	mov.w	r2, #1
    lsl r2,r0
 800075c:	fa02 f200 	lsl.w	r2, r2, r0
    orr r1,r2
 8000760:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, RCC_AHB1ENR]
 8000764:	6319      	str	r1, [r3, #48]	; 0x30

08000766 <skip_enable>:

  skip_enable:

  bx lr
 8000766:	4770      	bx	lr

  mov r3,#4
  cmp r0,r3
  bgt skip_enable
    
    ldr r3,=RCC_BASE
 8000768:	40023800 	.word	0x40023800

0800076c <gpio_c_init>:

  .text

  FUNCTION gpio_c_init,global		// initialize 16 bits of Port C to inputs

    push {lr}
 800076c:	b500      	push	{lr}

		mov	r0,#2										// send 2 as argument to rcc_gpio_enable function
 800076e:	f04f 0002 	mov.w	r0, #2
		bl	rcc_gpio_enable					// call rcc_gpio_enable
 8000772:	f7ff ffeb 	bl	800074c <rcc_gpio_enable>

		ldr	r3,=#GPIOC_BASE					// r3 = GPIO PORT C base address
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <gpio_c_init+0x20>)

		ldr r2,=#0x00000000					// r2 = 0
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <gpio_c_init+0x24>)
		str	r2,[r3,#GPIO_PUPDR]			// clear Port C PUPD register
 800077a:	60da      	str	r2, [r3, #12]
		str	r2,[r3,#GPIO_MODER]			// clear Port C MODE register
 800077c:	601a      	str	r2, [r3, #0]
		str	r2,[r3,#GPIO_OTYPER]		// clear Port C Type register
 800077e:	605a      	str	r2, [r3, #4]

		ldr	r2,=#0xffffffff					// r2 = 0xfffffff
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <gpio_c_init+0x28>)
		str	r2,[r3,#GPIO_OSPEEDR]
 8000782:	609a      	str	r2, [r3, #8]

    pop {lr}
 8000784:	f85d eb04 	ldr.w	lr, [sp], #4

    bx lr
 8000788:	4770      	bx	lr
 800078a:	0000      	.short	0x0000
    push {lr}

		mov	r0,#2										// send 2 as argument to rcc_gpio_enable function
		bl	rcc_gpio_enable					// call rcc_gpio_enable

		ldr	r3,=#GPIOC_BASE					// r3 = GPIO PORT C base address
 800078c:	40020800 	.word	0x40020800

		ldr r2,=#0x00000000					// r2 = 0
 8000790:	00000000 	.word	0x00000000
		str	r2,[r3,#GPIO_PUPDR]			// clear Port C PUPD register
		str	r2,[r3,#GPIO_MODER]			// clear Port C MODE register
		str	r2,[r3,#GPIO_OTYPER]		// clear Port C Type register

		ldr	r2,=#0xffffffff					// r2 = 0xfffffff
 8000794:	ffffffff 	.word	0xffffffff

08000798 <gpio_c_get>:
  ENDFUNC gpio_c_init


	FUNCTION gpio_c_get,global		// get the 16 bits of Port C inputs

		push {lr}
 8000798:	b500      	push	{lr}

		ldr	r3,=#GPIOC_BASE					// load r3 with base address of GPIO Port C
 800079a:	4b02      	ldr	r3, [pc, #8]	; (80007a4 <gpio_c_get+0xc>)

		ldr	r0,[r3,#GPIO_IDR]				// load r0 (return arg) with GPIO Port C input data register
 800079c:	6918      	ldr	r0, [r3, #16]

		pop {lr}
 800079e:	f85d eb04 	ldr.w	lr, [sp], #4

		bx lr
 80007a2:	4770      	bx	lr

	FUNCTION gpio_c_get,global		// get the 16 bits of Port C inputs

		push {lr}

		ldr	r3,=#GPIOC_BASE					// load r3 with base address of GPIO Port C
 80007a4:	40020800 	.word	0x40020800

080007a8 <adc_init>:
struct RCC  * RCC  = (struct RCC*)RCC_BASE;
struct GPIO *GPIOA = (struct GPIO*)GPIOA_BASE;
struct ADC  *ADC1  = (struct ADC*)ADC1_BASE;

void adc_init(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  // enable GPIOA0
  RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <adc_init+0x80>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <adc_init+0x80>)
 80007b2:	6812      	ldr	r2, [r2, #0]
 80007b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80007b6:	f042 0201 	orr.w	r2, r2, #1
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  GPIOA->MODER |= ((uint32_t)(GPIO_MODE_ANALOG << ( 2 * 0))); // 0x3 is analog mode
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <adc_init+0x84>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1a      	ldr	r2, [pc, #104]	; (800082c <adc_init+0x84>)
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	6812      	ldr	r2, [r2, #0]
 80007c6:	f042 0203 	orr.w	r2, r2, #3
 80007ca:	601a      	str	r2, [r3, #0]
  
 // enable APB2 for ADC1
  RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <adc_init+0x80>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a15      	ldr	r2, [pc, #84]	; (8000828 <adc_init+0x80>)
 80007d2:	6812      	ldr	r2, [r2, #0]
 80007d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80007d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80007da:	645a      	str	r2, [r3, #68]	; 0x44

  ADC1->CR1 = 0; // defaults are fine for now
 80007dc:	4b14      	ldr	r3, [pc, #80]	; (8000830 <adc_init+0x88>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  ADC1->CR2 = 0; // defaults are fine for now
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <adc_init+0x88>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  
  // Configure Channel/Sequence
  // SQR1[23:20] set sequence length -- 0 means one conversion 
  ADC1->SQR1 = 0;
 80007ec:	4b10      	ldr	r3, [pc, #64]	; (8000830 <adc_init+0x88>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  // NOTE: set ~10us to read 
  // ADCCLK is F_pclk2 (84MHz) / prescaler
  // default prescaler = 2, so default ADCCLK is 42MHz
  // 42MHz -> 23.9ns cycle, so we need 480 cycle sampling time
  // Set Sample Time (480 Cycles)
  ADC1->SMPR1 = 7<<18;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <adc_init+0x88>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
 80007fc:	60da      	str	r2, [r3, #12]

  // set the channel
  ADC1->SQR2 = 0;
 80007fe:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <adc_init+0x88>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2200      	movs	r2, #0
 8000804:	631a      	str	r2, [r3, #48]	; 0x30
  ADC1->SQR3 = 0; // choose ADC IN0
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <adc_init+0x88>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2200      	movs	r2, #0
 800080c:	635a      	str	r2, [r3, #52]	; 0x34

  // Enable ADC
  ADC1->CR2 |= ADC_CR2_ADON;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <adc_init+0x88>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <adc_init+0x88>)
 8000814:	6812      	ldr	r2, [r2, #0]
 8000816:	6892      	ldr	r2, [r2, #8]
 8000818:	f042 0201 	orr.w	r2, r2, #1
 800081c:	609a      	str	r2, [r3, #8]
}
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000034 	.word	0x20000034
 800082c:	20000038 	.word	0x20000038
 8000830:	2000003c 	.word	0x2000003c

08000834 <adc_start>:

void adc_start(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  // Start Regular Channel Conversion
  ADC1->CR2 |= ADC_CR2_SWSTART;
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <adc_start+0x1c>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a04      	ldr	r2, [pc, #16]	; (8000850 <adc_start+0x1c>)
 800083e:	6812      	ldr	r2, [r2, #0]
 8000840:	6892      	ldr	r2, [r2, #8]
 8000842:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000846:	609a      	str	r2, [r3, #8]
}
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	2000003c 	.word	0x2000003c

08000854 <adc_done>:

bool adc_done(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  // This bit is SET by hardware once the conversion is complete
  // it is CLEARED by software OR by reading the ADC_DR register
  return (ADC1->SR & ADC_SR_EOC);
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <adc_done+0x24>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf14      	ite	ne
 8000866:	2301      	movne	r3, #1
 8000868:	2300      	moveq	r3, #0
 800086a:	b2db      	uxtb	r3, r3
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	2000003c 	.word	0x2000003c

0800087c <adc_get>:

uint32_t adc_get(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  // this clears the ADC_SR_EOC bit
  return ADC1->DR;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <adc_get+0x14>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	2000003c 	.word	0x2000003c

08000894 <ADC_IRQHandler>:
*/

FUNCTION Default_Handler

  Infinite_Loop:
    b  Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC_IRQHandler>
 8000896:	bf00      	nop

08000898 <Reset_Handler>:
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 8000898:	4915      	ldr	r1, [pc, #84]	; (80008f0 <bloop+0x3e>)
    ldr	r2, =__data_start__	// to start
 800089a:	4a16      	ldr	r2, [pc, #88]	; (80008f4 <bloop+0x42>)
    ldr	r3, =__data_end__	// to end
 800089c:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <bloop+0x46>)

0800089e <loop_data>:

    loop_data:
      cmp	r2, r3
 800089e:	429a      	cmp	r2, r3
      ittt	lt
 80008a0:	bfbe      	ittt	lt
      ldrlt	r0, [r1], #4
 80008a2:	f851 0b04 	ldrlt.w	r0, [r1], #4
      strlt	r0, [r2], #4
 80008a6:	f842 0b04 	strlt.w	r0, [r2], #4
      blt	loop_data
 80008aa:	e7f8      	blt.n	800089e <loop_data>
      
    movs    r0, #0
 80008ac:	2000      	movs	r0, #0
    ldr     r1, =__bss_start__
 80008ae:	4913      	ldr	r1, [pc, #76]	; (80008fc <bloop+0x4a>)
    ldr     r2, =__bss_end__
 80008b0:	4a13      	ldr	r2, [pc, #76]	; (8000900 <bloop+0x4e>)

080008b2 <bloop>:

    bloop:
      cmp     r1, r2
 80008b2:	4291      	cmp	r1, r2
      itt     lo
 80008b4:	bf3c      	itt	cc
      strlo   r0, [r1], #4
 80008b6:	f841 0b04 	strcc.w	r0, [r1], #4
      blo     bloop
 80008ba:	e7fa      	bcc.n	80008b2 <bloop>
    
    bl __libc_init_array
 80008bc:	f000 fe12 	bl	80014e4 <__libc_init_array>

    ldr	r0, .Lfini
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <bloop+0x3a>)
    bl	atexit
 80008c2:	f000 fdf9 	bl	80014b8 <atexit>

    .weak SystemInit
    ldr	r0,=SystemInit
 80008c6:	480f      	ldr	r0, [pc, #60]	; (8000904 <bloop+0x52>)
    cmp	r0,#0
 80008c8:	2800      	cmp	r0, #0
    it	ne
 80008ca:	bf18      	it	ne
    blxne	r0
 80008cc:	4780      	blxne	r0
    
    ldr	  r3,=0xe000ed14
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <bloop+0x56>)
    ldr   r2,=((1<<4) | (1<<3))
 80008d0:	4a0e      	ldr	r2, [pc, #56]	; (800090c <bloop+0x5a>)
    str   r2,[r3]
 80008d2:	601a      	str	r2, [r3, #0]
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <bloop+0x5e>)
    ldr r1,[r3, #RCC_AHB1ENR]
 80008d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
    mov r2,#0b11111			/* enable all clocks */
 80008d8:	f04f 021f 	mov.w	r2, #31
    orr r1,r2
 80008dc:	ea41 0102 	orr.w	r1, r1, r2
    str r1,[r3, #RCC_AHB1ENR]
 80008e0:	6319      	str	r1, [r3, #48]	; 0x30
    
    bl  main
 80008e2:	f7ff fc81 	bl	80001e8 <main>
	
    bl  exit
 80008e6:	f000 fded 	bl	80014c4 <exit>
	
    bx  lr
 80008ea:	4770      	bx	lr
 80008ec:	08001705 	.word	0x08001705
  .text
  
  FUNCTION Reset_Handler,global

    /* Copy the data segment initializers from flash to SRAM */  
    ldr	r1, =__etext		// from start
 80008f0:	0800171c 	.word	0x0800171c
    ldr	r2, =__data_start__	// to start
 80008f4:	20000000 	.word	0x20000000
    ldr	r3, =__data_end__	// to end
 80008f8:	20000468 	.word	0x20000468
      ldrlt	r0, [r1], #4
      strlt	r0, [r2], #4
      blt	loop_data
      
    movs    r0, #0
    ldr     r1, =__bss_start__
 80008fc:	20000468 	.word	0x20000468
    ldr     r2, =__bss_end__
 8000900:	20000490 	.word	0x20000490

    ldr	r0, .Lfini
    bl	atexit

    .weak SystemInit
    ldr	r0,=SystemInit
 8000904:	00000000 	.word	0x00000000
    cmp	r0,#0
    it	ne
    blxne	r0
    
    ldr	  r3,=0xe000ed14
 8000908:	e000ed14 	.word	0xe000ed14
    ldr   r2,=((1<<4) | (1<<3))
 800090c:	00000018 	.word	0x00000018
      .equ RCC_AHB1ENR_GPIOB_EN,(1<<1)
      .equ RCC_AHB1ENR_GPIOC_EN,(1<<2)
      .equ RCC_AHB1ENR_GPIOD_EN,(1<<3)
      .equ RCC_AHB1ENR_GPIOE_EN,(1<<4)
     
    ldr r3,=RCC_BASE
 8000910:	40023800 	.word	0x40023800

08000914 <seg7_init>:
 8000914:	b570      	push	{r4, r5, r6, lr}
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <seg7_init_loop_end+0x6>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4911      	ldr	r1, [pc, #68]	; (8000960 <seg7_init_loop_end+0xa>)
 800091c:	f361 0213 	bfi	r2, r1, #0, #20
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	490f      	ldr	r1, [pc, #60]	; (8000964 <seg7_init_loop_end+0xe>)
 8000926:	f361 0209 	bfi	r2, r1, #0, #10
 800092a:	615a      	str	r2, [r3, #20]
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <seg7_init_loop_end+0x12>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	490e      	ldr	r1, [pc, #56]	; (800096c <seg7_init_loop_end+0x16>)
 8000932:	f361 0201 	bfi	r2, r1, #0, #2
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	f04f 0400 	mov.w	r4, #0
 800093c:	f04f 0508 	mov.w	r5, #8
 8000940:	4e0b      	ldr	r6, [pc, #44]	; (8000970 <seg7_init_loop_end+0x1a>)

08000942 <seg7_init_loop>:
 8000942:	b145      	cbz	r5, 8000956 <seg7_init_loop_end>
 8000944:	4620      	mov	r0, r4
 8000946:	4631      	mov	r1, r6
 8000948:	f000 f814 	bl	8000974 <seg7_put>
 800094c:	f104 0401 	add.w	r4, r4, #1
 8000950:	f1a5 0501 	sub.w	r5, r5, #1
 8000954:	e7f5      	b.n	8000942 <seg7_init_loop>

08000956 <seg7_init_loop_end>:
 8000956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000
 8000960:	00055555 	.word	0x00055555
 8000964:	000003ff 	.word	0x000003ff
 8000968:	40020400 	.word	0x40020400
 800096c:	00000001 	.word	0x00000001
 8000970:	0000007f 	.word	0x0000007f

08000974 <seg7_put>:
 8000974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000976:	4f0a      	ldr	r7, [pc, #40]	; (80009a0 <seg7_put+0x2c>)
 8000978:	697c      	ldr	r4, [r7, #20]
 800097a:	f360 0402 	bfi	r4, r0, #0, #3
 800097e:	f361 04c9 	bfi	r4, r1, #3, #7
 8000982:	617c      	str	r4, [r7, #20]
 8000984:	4f07      	ldr	r7, [pc, #28]	; (80009a4 <seg7_put+0x30>)
 8000986:	f04f 0401 	mov.w	r4, #1
 800098a:	61bc      	str	r4, [r7, #24]
 800098c:	bf00      	nop
 800098e:	bf00      	nop
 8000990:	bf00      	nop
 8000992:	bf00      	nop
 8000994:	ea4f 4404 	mov.w	r4, r4, lsl #16
 8000998:	61bc      	str	r4, [r7, #24]
 800099a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800099e:	4770      	bx	lr
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020400 	.word	0x40020400

080009a8 <__aeabi_drsub>:
 80009a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80009ac:	e002      	b.n	80009b4 <__adddf3>
 80009ae:	bf00      	nop

080009b0 <__aeabi_dsub>:
 80009b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080009b4 <__adddf3>:
 80009b4:	b530      	push	{r4, r5, lr}
 80009b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80009ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80009be:	ea94 0f05 	teq	r4, r5
 80009c2:	bf08      	it	eq
 80009c4:	ea90 0f02 	teqeq	r0, r2
 80009c8:	bf1f      	itttt	ne
 80009ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80009ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80009d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80009d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80009da:	f000 80e2 	beq.w	8000ba2 <__adddf3+0x1ee>
 80009de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80009e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80009e6:	bfb8      	it	lt
 80009e8:	426d      	neglt	r5, r5
 80009ea:	dd0c      	ble.n	8000a06 <__adddf3+0x52>
 80009ec:	442c      	add	r4, r5
 80009ee:	ea80 0202 	eor.w	r2, r0, r2
 80009f2:	ea81 0303 	eor.w	r3, r1, r3
 80009f6:	ea82 0000 	eor.w	r0, r2, r0
 80009fa:	ea83 0101 	eor.w	r1, r3, r1
 80009fe:	ea80 0202 	eor.w	r2, r0, r2
 8000a02:	ea81 0303 	eor.w	r3, r1, r3
 8000a06:	2d36      	cmp	r5, #54	; 0x36
 8000a08:	bf88      	it	hi
 8000a0a:	bd30      	pophi	{r4, r5, pc}
 8000a0c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a10:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a14:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000a18:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000a1c:	d002      	beq.n	8000a24 <__adddf3+0x70>
 8000a1e:	4240      	negs	r0, r0
 8000a20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a24:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000a28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a2c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000a30:	d002      	beq.n	8000a38 <__adddf3+0x84>
 8000a32:	4252      	negs	r2, r2
 8000a34:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000a38:	ea94 0f05 	teq	r4, r5
 8000a3c:	f000 80a7 	beq.w	8000b8e <__adddf3+0x1da>
 8000a40:	f1a4 0401 	sub.w	r4, r4, #1
 8000a44:	f1d5 0e20 	rsbs	lr, r5, #32
 8000a48:	db0d      	blt.n	8000a66 <__adddf3+0xb2>
 8000a4a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000a4e:	fa22 f205 	lsr.w	r2, r2, r5
 8000a52:	1880      	adds	r0, r0, r2
 8000a54:	f141 0100 	adc.w	r1, r1, #0
 8000a58:	fa03 f20e 	lsl.w	r2, r3, lr
 8000a5c:	1880      	adds	r0, r0, r2
 8000a5e:	fa43 f305 	asr.w	r3, r3, r5
 8000a62:	4159      	adcs	r1, r3
 8000a64:	e00e      	b.n	8000a84 <__adddf3+0xd0>
 8000a66:	f1a5 0520 	sub.w	r5, r5, #32
 8000a6a:	f10e 0e20 	add.w	lr, lr, #32
 8000a6e:	2a01      	cmp	r2, #1
 8000a70:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000a74:	bf28      	it	cs
 8000a76:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000a7a:	fa43 f305 	asr.w	r3, r3, r5
 8000a7e:	18c0      	adds	r0, r0, r3
 8000a80:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000a84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000a88:	d507      	bpl.n	8000a9a <__adddf3+0xe6>
 8000a8a:	f04f 0e00 	mov.w	lr, #0
 8000a8e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000a92:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000a96:	eb6e 0101 	sbc.w	r1, lr, r1
 8000a9a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000a9e:	d31b      	bcc.n	8000ad8 <__adddf3+0x124>
 8000aa0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000aa4:	d30c      	bcc.n	8000ac0 <__adddf3+0x10c>
 8000aa6:	0849      	lsrs	r1, r1, #1
 8000aa8:	ea5f 0030 	movs.w	r0, r0, rrx
 8000aac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000ab0:	f104 0401 	add.w	r4, r4, #1
 8000ab4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000ab8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000abc:	f080 809a 	bcs.w	8000bf4 <__adddf3+0x240>
 8000ac0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000aca:	f150 0000 	adcs.w	r0, r0, #0
 8000ace:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ad2:	ea41 0105 	orr.w	r1, r1, r5
 8000ad6:	bd30      	pop	{r4, r5, pc}
 8000ad8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000adc:	4140      	adcs	r0, r0
 8000ade:	eb41 0101 	adc.w	r1, r1, r1
 8000ae2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ae6:	f1a4 0401 	sub.w	r4, r4, #1
 8000aea:	d1e9      	bne.n	8000ac0 <__adddf3+0x10c>
 8000aec:	f091 0f00 	teq	r1, #0
 8000af0:	bf04      	itt	eq
 8000af2:	4601      	moveq	r1, r0
 8000af4:	2000      	moveq	r0, #0
 8000af6:	fab1 f381 	clz	r3, r1
 8000afa:	bf08      	it	eq
 8000afc:	3320      	addeq	r3, #32
 8000afe:	f1a3 030b 	sub.w	r3, r3, #11
 8000b02:	f1b3 0220 	subs.w	r2, r3, #32
 8000b06:	da0c      	bge.n	8000b22 <__adddf3+0x16e>
 8000b08:	320c      	adds	r2, #12
 8000b0a:	dd08      	ble.n	8000b1e <__adddf3+0x16a>
 8000b0c:	f102 0c14 	add.w	ip, r2, #20
 8000b10:	f1c2 020c 	rsb	r2, r2, #12
 8000b14:	fa01 f00c 	lsl.w	r0, r1, ip
 8000b18:	fa21 f102 	lsr.w	r1, r1, r2
 8000b1c:	e00c      	b.n	8000b38 <__adddf3+0x184>
 8000b1e:	f102 0214 	add.w	r2, r2, #20
 8000b22:	bfd8      	it	le
 8000b24:	f1c2 0c20 	rsble	ip, r2, #32
 8000b28:	fa01 f102 	lsl.w	r1, r1, r2
 8000b2c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000b30:	bfdc      	itt	le
 8000b32:	ea41 010c 	orrle.w	r1, r1, ip
 8000b36:	4090      	lslle	r0, r2
 8000b38:	1ae4      	subs	r4, r4, r3
 8000b3a:	bfa2      	ittt	ge
 8000b3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000b40:	4329      	orrge	r1, r5
 8000b42:	bd30      	popge	{r4, r5, pc}
 8000b44:	ea6f 0404 	mvn.w	r4, r4
 8000b48:	3c1f      	subs	r4, #31
 8000b4a:	da1c      	bge.n	8000b86 <__adddf3+0x1d2>
 8000b4c:	340c      	adds	r4, #12
 8000b4e:	dc0e      	bgt.n	8000b6e <__adddf3+0x1ba>
 8000b50:	f104 0414 	add.w	r4, r4, #20
 8000b54:	f1c4 0220 	rsb	r2, r4, #32
 8000b58:	fa20 f004 	lsr.w	r0, r0, r4
 8000b5c:	fa01 f302 	lsl.w	r3, r1, r2
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	fa21 f304 	lsr.w	r3, r1, r4
 8000b68:	ea45 0103 	orr.w	r1, r5, r3
 8000b6c:	bd30      	pop	{r4, r5, pc}
 8000b6e:	f1c4 040c 	rsb	r4, r4, #12
 8000b72:	f1c4 0220 	rsb	r2, r4, #32
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	fa01 f304 	lsl.w	r3, r1, r4
 8000b7e:	ea40 0003 	orr.w	r0, r0, r3
 8000b82:	4629      	mov	r1, r5
 8000b84:	bd30      	pop	{r4, r5, pc}
 8000b86:	fa21 f004 	lsr.w	r0, r1, r4
 8000b8a:	4629      	mov	r1, r5
 8000b8c:	bd30      	pop	{r4, r5, pc}
 8000b8e:	f094 0f00 	teq	r4, #0
 8000b92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000b96:	bf06      	itte	eq
 8000b98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000b9c:	3401      	addeq	r4, #1
 8000b9e:	3d01      	subne	r5, #1
 8000ba0:	e74e      	b.n	8000a40 <__adddf3+0x8c>
 8000ba2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000ba6:	bf18      	it	ne
 8000ba8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000bac:	d029      	beq.n	8000c02 <__adddf3+0x24e>
 8000bae:	ea94 0f05 	teq	r4, r5
 8000bb2:	bf08      	it	eq
 8000bb4:	ea90 0f02 	teqeq	r0, r2
 8000bb8:	d005      	beq.n	8000bc6 <__adddf3+0x212>
 8000bba:	ea54 0c00 	orrs.w	ip, r4, r0
 8000bbe:	bf04      	itt	eq
 8000bc0:	4619      	moveq	r1, r3
 8000bc2:	4610      	moveq	r0, r2
 8000bc4:	bd30      	pop	{r4, r5, pc}
 8000bc6:	ea91 0f03 	teq	r1, r3
 8000bca:	bf1e      	ittt	ne
 8000bcc:	2100      	movne	r1, #0
 8000bce:	2000      	movne	r0, #0
 8000bd0:	bd30      	popne	{r4, r5, pc}
 8000bd2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000bd6:	d105      	bne.n	8000be4 <__adddf3+0x230>
 8000bd8:	0040      	lsls	r0, r0, #1
 8000bda:	4149      	adcs	r1, r1
 8000bdc:	bf28      	it	cs
 8000bde:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000be2:	bd30      	pop	{r4, r5, pc}
 8000be4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000be8:	bf3c      	itt	cc
 8000bea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000bee:	bd30      	popcc	{r4, r5, pc}
 8000bf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000bf4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000bf8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	bd30      	pop	{r4, r5, pc}
 8000c02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000c06:	bf1a      	itte	ne
 8000c08:	4619      	movne	r1, r3
 8000c0a:	4610      	movne	r0, r2
 8000c0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000c10:	bf1c      	itt	ne
 8000c12:	460b      	movne	r3, r1
 8000c14:	4602      	movne	r2, r0
 8000c16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c1a:	bf06      	itte	eq
 8000c1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000c20:	ea91 0f03 	teqeq	r1, r3
 8000c24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000c28:	bd30      	pop	{r4, r5, pc}
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ui2d>:
 8000c2c:	f090 0f00 	teq	r0, #0
 8000c30:	bf04      	itt	eq
 8000c32:	2100      	moveq	r1, #0
 8000c34:	4770      	bxeq	lr
 8000c36:	b530      	push	{r4, r5, lr}
 8000c38:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c40:	f04f 0500 	mov.w	r5, #0
 8000c44:	f04f 0100 	mov.w	r1, #0
 8000c48:	e750      	b.n	8000aec <__adddf3+0x138>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2d>:
 8000c4c:	f090 0f00 	teq	r0, #0
 8000c50:	bf04      	itt	eq
 8000c52:	2100      	moveq	r1, #0
 8000c54:	4770      	bxeq	lr
 8000c56:	b530      	push	{r4, r5, lr}
 8000c58:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000c5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000c60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	f04f 0100 	mov.w	r1, #0
 8000c6c:	e73e      	b.n	8000aec <__adddf3+0x138>
 8000c6e:	bf00      	nop

08000c70 <__aeabi_f2d>:
 8000c70:	0042      	lsls	r2, r0, #1
 8000c72:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000c76:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000c7e:	bf1f      	itttt	ne
 8000c80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000c84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000c88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000c8c:	4770      	bxne	lr
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	bf14      	ite	ne
 8000c94:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000c98:	4770      	bxeq	lr
 8000c9a:	b530      	push	{r4, r5, lr}
 8000c9c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000ca0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000ca4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000ca8:	e720      	b.n	8000aec <__adddf3+0x138>
 8000caa:	bf00      	nop

08000cac <__aeabi_ul2d>:
 8000cac:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb0:	bf08      	it	eq
 8000cb2:	4770      	bxeq	lr
 8000cb4:	b530      	push	{r4, r5, lr}
 8000cb6:	f04f 0500 	mov.w	r5, #0
 8000cba:	e00a      	b.n	8000cd2 <__aeabi_l2d+0x16>

08000cbc <__aeabi_l2d>:
 8000cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	b530      	push	{r4, r5, lr}
 8000cc6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000cca:	d502      	bpl.n	8000cd2 <__aeabi_l2d+0x16>
 8000ccc:	4240      	negs	r0, r0
 8000cce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000cd6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000cda:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000cde:	f43f aedc 	beq.w	8000a9a <__adddf3+0xe6>
 8000ce2:	f04f 0203 	mov.w	r2, #3
 8000ce6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000cea:	bf18      	it	ne
 8000cec:	3203      	addne	r2, #3
 8000cee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000cf2:	bf18      	it	ne
 8000cf4:	3203      	addne	r2, #3
 8000cf6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000cfa:	f1c2 0320 	rsb	r3, r2, #32
 8000cfe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d02:	fa20 f002 	lsr.w	r0, r0, r2
 8000d06:	fa01 fe03 	lsl.w	lr, r1, r3
 8000d0a:	ea40 000e 	orr.w	r0, r0, lr
 8000d0e:	fa21 f102 	lsr.w	r1, r1, r2
 8000d12:	4414      	add	r4, r2
 8000d14:	e6c1      	b.n	8000a9a <__adddf3+0xe6>
 8000d16:	bf00      	nop

08000d18 <__aeabi_dmul>:
 8000d18:	b570      	push	{r4, r5, r6, lr}
 8000d1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000d22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000d26:	bf1d      	ittte	ne
 8000d28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000d2c:	ea94 0f0c 	teqne	r4, ip
 8000d30:	ea95 0f0c 	teqne	r5, ip
 8000d34:	f000 f8de 	bleq	8000ef4 <__aeabi_dmul+0x1dc>
 8000d38:	442c      	add	r4, r5
 8000d3a:	ea81 0603 	eor.w	r6, r1, r3
 8000d3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000d42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000d46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000d4a:	bf18      	it	ne
 8000d4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000d50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d58:	d038      	beq.n	8000dcc <__aeabi_dmul+0xb4>
 8000d5a:	fba0 ce02 	umull	ip, lr, r0, r2
 8000d5e:	f04f 0500 	mov.w	r5, #0
 8000d62:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000d66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000d6a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000d6e:	f04f 0600 	mov.w	r6, #0
 8000d72:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000d76:	f09c 0f00 	teq	ip, #0
 8000d7a:	bf18      	it	ne
 8000d7c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000d80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000d84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000d88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000d8c:	d204      	bcs.n	8000d98 <__aeabi_dmul+0x80>
 8000d8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000d92:	416d      	adcs	r5, r5
 8000d94:	eb46 0606 	adc.w	r6, r6, r6
 8000d98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000d9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000da0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000da4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000da8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000dac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000db0:	bf88      	it	hi
 8000db2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000db6:	d81e      	bhi.n	8000df6 <__aeabi_dmul+0xde>
 8000db8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000dbc:	bf08      	it	eq
 8000dbe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000dc2:	f150 0000 	adcs.w	r0, r0, #0
 8000dc6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000dca:	bd70      	pop	{r4, r5, r6, pc}
 8000dcc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000dd0:	ea46 0101 	orr.w	r1, r6, r1
 8000dd4:	ea40 0002 	orr.w	r0, r0, r2
 8000dd8:	ea81 0103 	eor.w	r1, r1, r3
 8000ddc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000de0:	bfc2      	ittt	gt
 8000de2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000de6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000dea:	bd70      	popgt	{r4, r5, r6, pc}
 8000dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000df0:	f04f 0e00 	mov.w	lr, #0
 8000df4:	3c01      	subs	r4, #1
 8000df6:	f300 80ab 	bgt.w	8000f50 <__aeabi_dmul+0x238>
 8000dfa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000dfe:	bfde      	ittt	le
 8000e00:	2000      	movle	r0, #0
 8000e02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000e06:	bd70      	pople	{r4, r5, r6, pc}
 8000e08:	f1c4 0400 	rsb	r4, r4, #0
 8000e0c:	3c20      	subs	r4, #32
 8000e0e:	da35      	bge.n	8000e7c <__aeabi_dmul+0x164>
 8000e10:	340c      	adds	r4, #12
 8000e12:	dc1b      	bgt.n	8000e4c <__aeabi_dmul+0x134>
 8000e14:	f104 0414 	add.w	r4, r4, #20
 8000e18:	f1c4 0520 	rsb	r5, r4, #32
 8000e1c:	fa00 f305 	lsl.w	r3, r0, r5
 8000e20:	fa20 f004 	lsr.w	r0, r0, r4
 8000e24:	fa01 f205 	lsl.w	r2, r1, r5
 8000e28:	ea40 0002 	orr.w	r0, r0, r2
 8000e2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000e34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000e38:	fa21 f604 	lsr.w	r6, r1, r4
 8000e3c:	eb42 0106 	adc.w	r1, r2, r6
 8000e40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000e44:	bf08      	it	eq
 8000e46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000e4a:	bd70      	pop	{r4, r5, r6, pc}
 8000e4c:	f1c4 040c 	rsb	r4, r4, #12
 8000e50:	f1c4 0520 	rsb	r5, r4, #32
 8000e54:	fa00 f304 	lsl.w	r3, r0, r4
 8000e58:	fa20 f005 	lsr.w	r0, r0, r5
 8000e5c:	fa01 f204 	lsl.w	r2, r1, r4
 8000e60:	ea40 0002 	orr.w	r0, r0, r2
 8000e64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000e6c:	f141 0100 	adc.w	r1, r1, #0
 8000e70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000e74:	bf08      	it	eq
 8000e76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000e7a:	bd70      	pop	{r4, r5, r6, pc}
 8000e7c:	f1c4 0520 	rsb	r5, r4, #32
 8000e80:	fa00 f205 	lsl.w	r2, r0, r5
 8000e84:	ea4e 0e02 	orr.w	lr, lr, r2
 8000e88:	fa20 f304 	lsr.w	r3, r0, r4
 8000e8c:	fa01 f205 	lsl.w	r2, r1, r5
 8000e90:	ea43 0302 	orr.w	r3, r3, r2
 8000e94:	fa21 f004 	lsr.w	r0, r1, r4
 8000e98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000e9c:	fa21 f204 	lsr.w	r2, r1, r4
 8000ea0:	ea20 0002 	bic.w	r0, r0, r2
 8000ea4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000ea8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000eb2:	bd70      	pop	{r4, r5, r6, pc}
 8000eb4:	f094 0f00 	teq	r4, #0
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_dmul+0x1c2>
 8000eba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000ebe:	0040      	lsls	r0, r0, #1
 8000ec0:	eb41 0101 	adc.w	r1, r1, r1
 8000ec4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ec8:	bf08      	it	eq
 8000eca:	3c01      	subeq	r4, #1
 8000ecc:	d0f7      	beq.n	8000ebe <__aeabi_dmul+0x1a6>
 8000ece:	ea41 0106 	orr.w	r1, r1, r6
 8000ed2:	f095 0f00 	teq	r5, #0
 8000ed6:	bf18      	it	ne
 8000ed8:	4770      	bxne	lr
 8000eda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000ede:	0052      	lsls	r2, r2, #1
 8000ee0:	eb43 0303 	adc.w	r3, r3, r3
 8000ee4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000ee8:	bf08      	it	eq
 8000eea:	3d01      	subeq	r5, #1
 8000eec:	d0f7      	beq.n	8000ede <__aeabi_dmul+0x1c6>
 8000eee:	ea43 0306 	orr.w	r3, r3, r6
 8000ef2:	4770      	bx	lr
 8000ef4:	ea94 0f0c 	teq	r4, ip
 8000ef8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000efc:	bf18      	it	ne
 8000efe:	ea95 0f0c 	teqne	r5, ip
 8000f02:	d00c      	beq.n	8000f1e <__aeabi_dmul+0x206>
 8000f04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f08:	bf18      	it	ne
 8000f0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000f0e:	d1d1      	bne.n	8000eb4 <__aeabi_dmul+0x19c>
 8000f10:	ea81 0103 	eor.w	r1, r1, r3
 8000f14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f18:	f04f 0000 	mov.w	r0, #0
 8000f1c:	bd70      	pop	{r4, r5, r6, pc}
 8000f1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000f22:	bf06      	itte	eq
 8000f24:	4610      	moveq	r0, r2
 8000f26:	4619      	moveq	r1, r3
 8000f28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000f2c:	d019      	beq.n	8000f62 <__aeabi_dmul+0x24a>
 8000f2e:	ea94 0f0c 	teq	r4, ip
 8000f32:	d102      	bne.n	8000f3a <__aeabi_dmul+0x222>
 8000f34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000f38:	d113      	bne.n	8000f62 <__aeabi_dmul+0x24a>
 8000f3a:	ea95 0f0c 	teq	r5, ip
 8000f3e:	d105      	bne.n	8000f4c <__aeabi_dmul+0x234>
 8000f40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000f44:	bf1c      	itt	ne
 8000f46:	4610      	movne	r0, r2
 8000f48:	4619      	movne	r1, r3
 8000f4a:	d10a      	bne.n	8000f62 <__aeabi_dmul+0x24a>
 8000f4c:	ea81 0103 	eor.w	r1, r1, r3
 8000f50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000f54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000f58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000f5c:	f04f 0000 	mov.w	r0, #0
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000f66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}

08000f6c <__aeabi_ddiv>:
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000f76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000f7a:	bf1d      	ittte	ne
 8000f7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000f80:	ea94 0f0c 	teqne	r4, ip
 8000f84:	ea95 0f0c 	teqne	r5, ip
 8000f88:	f000 f8a7 	bleq	80010da <__aeabi_ddiv+0x16e>
 8000f8c:	eba4 0405 	sub.w	r4, r4, r5
 8000f90:	ea81 0e03 	eor.w	lr, r1, r3
 8000f94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000f98:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000f9c:	f000 8088 	beq.w	80010b0 <__aeabi_ddiv+0x144>
 8000fa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000fa4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000fa8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000fac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000fb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000fb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000fb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000fbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000fc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000fc4:	429d      	cmp	r5, r3
 8000fc6:	bf08      	it	eq
 8000fc8:	4296      	cmpeq	r6, r2
 8000fca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000fce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000fd2:	d202      	bcs.n	8000fda <__aeabi_ddiv+0x6e>
 8000fd4:	085b      	lsrs	r3, r3, #1
 8000fd6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000fda:	1ab6      	subs	r6, r6, r2
 8000fdc:	eb65 0503 	sbc.w	r5, r5, r3
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000fe6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000fea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000fee:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ff2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ff6:	bf22      	ittt	cs
 8000ff8:	1ab6      	subcs	r6, r6, r2
 8000ffa:	4675      	movcs	r5, lr
 8000ffc:	ea40 000c 	orrcs.w	r0, r0, ip
 8001000:	085b      	lsrs	r3, r3, #1
 8001002:	ea4f 0232 	mov.w	r2, r2, rrx
 8001006:	ebb6 0e02 	subs.w	lr, r6, r2
 800100a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800100e:	bf22      	ittt	cs
 8001010:	1ab6      	subcs	r6, r6, r2
 8001012:	4675      	movcs	r5, lr
 8001014:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001018:	085b      	lsrs	r3, r3, #1
 800101a:	ea4f 0232 	mov.w	r2, r2, rrx
 800101e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001022:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001026:	bf22      	ittt	cs
 8001028:	1ab6      	subcs	r6, r6, r2
 800102a:	4675      	movcs	r5, lr
 800102c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001030:	085b      	lsrs	r3, r3, #1
 8001032:	ea4f 0232 	mov.w	r2, r2, rrx
 8001036:	ebb6 0e02 	subs.w	lr, r6, r2
 800103a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800103e:	bf22      	ittt	cs
 8001040:	1ab6      	subcs	r6, r6, r2
 8001042:	4675      	movcs	r5, lr
 8001044:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001048:	ea55 0e06 	orrs.w	lr, r5, r6
 800104c:	d018      	beq.n	8001080 <__aeabi_ddiv+0x114>
 800104e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001052:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001056:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800105a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800105e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001062:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001066:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800106a:	d1c0      	bne.n	8000fee <__aeabi_ddiv+0x82>
 800106c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001070:	d10b      	bne.n	800108a <__aeabi_ddiv+0x11e>
 8001072:	ea41 0100 	orr.w	r1, r1, r0
 8001076:	f04f 0000 	mov.w	r0, #0
 800107a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800107e:	e7b6      	b.n	8000fee <__aeabi_ddiv+0x82>
 8001080:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8001084:	bf04      	itt	eq
 8001086:	4301      	orreq	r1, r0
 8001088:	2000      	moveq	r0, #0
 800108a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800108e:	bf88      	it	hi
 8001090:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001094:	f63f aeaf 	bhi.w	8000df6 <__aeabi_dmul+0xde>
 8001098:	ebb5 0c03 	subs.w	ip, r5, r3
 800109c:	bf04      	itt	eq
 800109e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80010a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80010a6:	f150 0000 	adcs.w	r0, r0, #0
 80010aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80010ae:	bd70      	pop	{r4, r5, r6, pc}
 80010b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80010b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80010b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80010bc:	bfc2      	ittt	gt
 80010be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80010c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80010c6:	bd70      	popgt	{r4, r5, r6, pc}
 80010c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80010cc:	f04f 0e00 	mov.w	lr, #0
 80010d0:	3c01      	subs	r4, #1
 80010d2:	e690      	b.n	8000df6 <__aeabi_dmul+0xde>
 80010d4:	ea45 0e06 	orr.w	lr, r5, r6
 80010d8:	e68d      	b.n	8000df6 <__aeabi_dmul+0xde>
 80010da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80010de:	ea94 0f0c 	teq	r4, ip
 80010e2:	bf08      	it	eq
 80010e4:	ea95 0f0c 	teqeq	r5, ip
 80010e8:	f43f af3b 	beq.w	8000f62 <__aeabi_dmul+0x24a>
 80010ec:	ea94 0f0c 	teq	r4, ip
 80010f0:	d10a      	bne.n	8001108 <__aeabi_ddiv+0x19c>
 80010f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80010f6:	f47f af34 	bne.w	8000f62 <__aeabi_dmul+0x24a>
 80010fa:	ea95 0f0c 	teq	r5, ip
 80010fe:	f47f af25 	bne.w	8000f4c <__aeabi_dmul+0x234>
 8001102:	4610      	mov	r0, r2
 8001104:	4619      	mov	r1, r3
 8001106:	e72c      	b.n	8000f62 <__aeabi_dmul+0x24a>
 8001108:	ea95 0f0c 	teq	r5, ip
 800110c:	d106      	bne.n	800111c <__aeabi_ddiv+0x1b0>
 800110e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001112:	f43f aefd 	beq.w	8000f10 <__aeabi_dmul+0x1f8>
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	e722      	b.n	8000f62 <__aeabi_dmul+0x24a>
 800111c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001120:	bf18      	it	ne
 8001122:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001126:	f47f aec5 	bne.w	8000eb4 <__aeabi_dmul+0x19c>
 800112a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800112e:	f47f af0d 	bne.w	8000f4c <__aeabi_dmul+0x234>
 8001132:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001136:	f47f aeeb 	bne.w	8000f10 <__aeabi_dmul+0x1f8>
 800113a:	e712      	b.n	8000f62 <__aeabi_dmul+0x24a>

0800113c <__aeabi_d2iz>:
 800113c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8001140:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8001144:	d215      	bcs.n	8001172 <__aeabi_d2iz+0x36>
 8001146:	d511      	bpl.n	800116c <__aeabi_d2iz+0x30>
 8001148:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800114c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8001150:	d912      	bls.n	8001178 <__aeabi_d2iz+0x3c>
 8001152:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8001156:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800115e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001162:	fa23 f002 	lsr.w	r0, r3, r2
 8001166:	bf18      	it	ne
 8001168:	4240      	negne	r0, r0
 800116a:	4770      	bx	lr
 800116c:	f04f 0000 	mov.w	r0, #0
 8001170:	4770      	bx	lr
 8001172:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8001176:	d105      	bne.n	8001184 <__aeabi_d2iz+0x48>
 8001178:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800117c:	bf08      	it	eq
 800117e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001182:	4770      	bx	lr
 8001184:	f04f 0000 	mov.w	r0, #0
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop

0800118c <__aeabi_fmul>:
 800118c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001190:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8001194:	bf1e      	ittt	ne
 8001196:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800119a:	ea92 0f0c 	teqne	r2, ip
 800119e:	ea93 0f0c 	teqne	r3, ip
 80011a2:	d06f      	beq.n	8001284 <__aeabi_fmul+0xf8>
 80011a4:	441a      	add	r2, r3
 80011a6:	ea80 0c01 	eor.w	ip, r0, r1
 80011aa:	0240      	lsls	r0, r0, #9
 80011ac:	bf18      	it	ne
 80011ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80011b2:	d01e      	beq.n	80011f2 <__aeabi_fmul+0x66>
 80011b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80011bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80011c0:	fba0 3101 	umull	r3, r1, r0, r1
 80011c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80011c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80011cc:	bf3e      	ittt	cc
 80011ce:	0049      	lslcc	r1, r1, #1
 80011d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80011d4:	005b      	lslcc	r3, r3, #1
 80011d6:	ea40 0001 	orr.w	r0, r0, r1
 80011da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80011de:	2afd      	cmp	r2, #253	; 0xfd
 80011e0:	d81d      	bhi.n	800121e <__aeabi_fmul+0x92>
 80011e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80011ea:	bf08      	it	eq
 80011ec:	f020 0001 	biceq.w	r0, r0, #1
 80011f0:	4770      	bx	lr
 80011f2:	f090 0f00 	teq	r0, #0
 80011f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80011fa:	bf08      	it	eq
 80011fc:	0249      	lsleq	r1, r1, #9
 80011fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001202:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8001206:	3a7f      	subs	r2, #127	; 0x7f
 8001208:	bfc2      	ittt	gt
 800120a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800120e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001212:	4770      	bxgt	lr
 8001214:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	3a01      	subs	r2, #1
 800121e:	dc5d      	bgt.n	80012dc <__aeabi_fmul+0x150>
 8001220:	f112 0f19 	cmn.w	r2, #25
 8001224:	bfdc      	itt	le
 8001226:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800122a:	4770      	bxle	lr
 800122c:	f1c2 0200 	rsb	r2, r2, #0
 8001230:	0041      	lsls	r1, r0, #1
 8001232:	fa21 f102 	lsr.w	r1, r1, r2
 8001236:	f1c2 0220 	rsb	r2, r2, #32
 800123a:	fa00 fc02 	lsl.w	ip, r0, r2
 800123e:	ea5f 0031 	movs.w	r0, r1, rrx
 8001242:	f140 0000 	adc.w	r0, r0, #0
 8001246:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800124a:	bf08      	it	eq
 800124c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8001250:	4770      	bx	lr
 8001252:	f092 0f00 	teq	r2, #0
 8001256:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800125a:	bf02      	ittt	eq
 800125c:	0040      	lsleq	r0, r0, #1
 800125e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001262:	3a01      	subeq	r2, #1
 8001264:	d0f9      	beq.n	800125a <__aeabi_fmul+0xce>
 8001266:	ea40 000c 	orr.w	r0, r0, ip
 800126a:	f093 0f00 	teq	r3, #0
 800126e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001272:	bf02      	ittt	eq
 8001274:	0049      	lsleq	r1, r1, #1
 8001276:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800127a:	3b01      	subeq	r3, #1
 800127c:	d0f9      	beq.n	8001272 <__aeabi_fmul+0xe6>
 800127e:	ea41 010c 	orr.w	r1, r1, ip
 8001282:	e78f      	b.n	80011a4 <__aeabi_fmul+0x18>
 8001284:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001288:	ea92 0f0c 	teq	r2, ip
 800128c:	bf18      	it	ne
 800128e:	ea93 0f0c 	teqne	r3, ip
 8001292:	d00a      	beq.n	80012aa <__aeabi_fmul+0x11e>
 8001294:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001298:	bf18      	it	ne
 800129a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800129e:	d1d8      	bne.n	8001252 <__aeabi_fmul+0xc6>
 80012a0:	ea80 0001 	eor.w	r0, r0, r1
 80012a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012a8:	4770      	bx	lr
 80012aa:	f090 0f00 	teq	r0, #0
 80012ae:	bf17      	itett	ne
 80012b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80012b4:	4608      	moveq	r0, r1
 80012b6:	f091 0f00 	teqne	r1, #0
 80012ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80012be:	d014      	beq.n	80012ea <__aeabi_fmul+0x15e>
 80012c0:	ea92 0f0c 	teq	r2, ip
 80012c4:	d101      	bne.n	80012ca <__aeabi_fmul+0x13e>
 80012c6:	0242      	lsls	r2, r0, #9
 80012c8:	d10f      	bne.n	80012ea <__aeabi_fmul+0x15e>
 80012ca:	ea93 0f0c 	teq	r3, ip
 80012ce:	d103      	bne.n	80012d8 <__aeabi_fmul+0x14c>
 80012d0:	024b      	lsls	r3, r1, #9
 80012d2:	bf18      	it	ne
 80012d4:	4608      	movne	r0, r1
 80012d6:	d108      	bne.n	80012ea <__aeabi_fmul+0x15e>
 80012d8:	ea80 0001 	eor.w	r0, r0, r1
 80012dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80012e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80012e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80012e8:	4770      	bx	lr
 80012ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80012ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80012f2:	4770      	bx	lr

080012f4 <__aeabi_fdiv>:
 80012f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80012f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80012fc:	bf1e      	ittt	ne
 80012fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8001302:	ea92 0f0c 	teqne	r2, ip
 8001306:	ea93 0f0c 	teqne	r3, ip
 800130a:	d069      	beq.n	80013e0 <__aeabi_fdiv+0xec>
 800130c:	eba2 0203 	sub.w	r2, r2, r3
 8001310:	ea80 0c01 	eor.w	ip, r0, r1
 8001314:	0249      	lsls	r1, r1, #9
 8001316:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800131a:	d037      	beq.n	800138c <__aeabi_fdiv+0x98>
 800131c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001320:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001324:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001328:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800132c:	428b      	cmp	r3, r1
 800132e:	bf38      	it	cc
 8001330:	005b      	lslcc	r3, r3, #1
 8001332:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8001336:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800133a:	428b      	cmp	r3, r1
 800133c:	bf24      	itt	cs
 800133e:	1a5b      	subcs	r3, r3, r1
 8001340:	ea40 000c 	orrcs.w	r0, r0, ip
 8001344:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001348:	bf24      	itt	cs
 800134a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800134e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001352:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001356:	bf24      	itt	cs
 8001358:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800135c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001360:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001364:	bf24      	itt	cs
 8001366:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800136a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	bf18      	it	ne
 8001372:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001376:	d1e0      	bne.n	800133a <__aeabi_fdiv+0x46>
 8001378:	2afd      	cmp	r2, #253	; 0xfd
 800137a:	f63f af50 	bhi.w	800121e <__aeabi_fmul+0x92>
 800137e:	428b      	cmp	r3, r1
 8001380:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001384:	bf08      	it	eq
 8001386:	f020 0001 	biceq.w	r0, r0, #1
 800138a:	4770      	bx	lr
 800138c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001390:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001394:	327f      	adds	r2, #127	; 0x7f
 8001396:	bfc2      	ittt	gt
 8001398:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800139c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80013a0:	4770      	bxgt	lr
 80013a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80013a6:	f04f 0300 	mov.w	r3, #0
 80013aa:	3a01      	subs	r2, #1
 80013ac:	e737      	b.n	800121e <__aeabi_fmul+0x92>
 80013ae:	f092 0f00 	teq	r2, #0
 80013b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80013b6:	bf02      	ittt	eq
 80013b8:	0040      	lsleq	r0, r0, #1
 80013ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80013be:	3a01      	subeq	r2, #1
 80013c0:	d0f9      	beq.n	80013b6 <__aeabi_fdiv+0xc2>
 80013c2:	ea40 000c 	orr.w	r0, r0, ip
 80013c6:	f093 0f00 	teq	r3, #0
 80013ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80013ce:	bf02      	ittt	eq
 80013d0:	0049      	lsleq	r1, r1, #1
 80013d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80013d6:	3b01      	subeq	r3, #1
 80013d8:	d0f9      	beq.n	80013ce <__aeabi_fdiv+0xda>
 80013da:	ea41 010c 	orr.w	r1, r1, ip
 80013de:	e795      	b.n	800130c <__aeabi_fdiv+0x18>
 80013e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80013e4:	ea92 0f0c 	teq	r2, ip
 80013e8:	d108      	bne.n	80013fc <__aeabi_fdiv+0x108>
 80013ea:	0242      	lsls	r2, r0, #9
 80013ec:	f47f af7d 	bne.w	80012ea <__aeabi_fmul+0x15e>
 80013f0:	ea93 0f0c 	teq	r3, ip
 80013f4:	f47f af70 	bne.w	80012d8 <__aeabi_fmul+0x14c>
 80013f8:	4608      	mov	r0, r1
 80013fa:	e776      	b.n	80012ea <__aeabi_fmul+0x15e>
 80013fc:	ea93 0f0c 	teq	r3, ip
 8001400:	d104      	bne.n	800140c <__aeabi_fdiv+0x118>
 8001402:	024b      	lsls	r3, r1, #9
 8001404:	f43f af4c 	beq.w	80012a0 <__aeabi_fmul+0x114>
 8001408:	4608      	mov	r0, r1
 800140a:	e76e      	b.n	80012ea <__aeabi_fmul+0x15e>
 800140c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001410:	bf18      	it	ne
 8001412:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001416:	d1ca      	bne.n	80013ae <__aeabi_fdiv+0xba>
 8001418:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800141c:	f47f af5c 	bne.w	80012d8 <__aeabi_fmul+0x14c>
 8001420:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001424:	f47f af3c 	bne.w	80012a0 <__aeabi_fmul+0x114>
 8001428:	e75f      	b.n	80012ea <__aeabi_fmul+0x15e>
 800142a:	bf00      	nop

0800142c <__aeabi_f2iz>:
 800142c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001430:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001434:	d30f      	bcc.n	8001456 <__aeabi_f2iz+0x2a>
 8001436:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800143a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800143e:	d90d      	bls.n	800145c <__aeabi_f2iz+0x30>
 8001440:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001448:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800144c:	fa23 f002 	lsr.w	r0, r3, r2
 8001450:	bf18      	it	ne
 8001452:	4240      	negne	r0, r0
 8001454:	4770      	bx	lr
 8001456:	f04f 0000 	mov.w	r0, #0
 800145a:	4770      	bx	lr
 800145c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001460:	d101      	bne.n	8001466 <__aeabi_f2iz+0x3a>
 8001462:	0242      	lsls	r2, r0, #9
 8001464:	d105      	bne.n	8001472 <__aeabi_f2iz+0x46>
 8001466:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800146a:	bf08      	it	eq
 800146c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001470:	4770      	bx	lr
 8001472:	f04f 0000 	mov.w	r0, #0
 8001476:	4770      	bx	lr

08001478 <__aeabi_f2uiz>:
 8001478:	0042      	lsls	r2, r0, #1
 800147a:	d20e      	bcs.n	800149a <__aeabi_f2uiz+0x22>
 800147c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001480:	d30b      	bcc.n	800149a <__aeabi_f2uiz+0x22>
 8001482:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001486:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800148a:	d409      	bmi.n	80014a0 <__aeabi_f2uiz+0x28>
 800148c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001490:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001494:	fa23 f002 	lsr.w	r0, r3, r2
 8001498:	4770      	bx	lr
 800149a:	f04f 0000 	mov.w	r0, #0
 800149e:	4770      	bx	lr
 80014a0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80014a4:	d101      	bne.n	80014aa <__aeabi_f2uiz+0x32>
 80014a6:	0242      	lsls	r2, r0, #9
 80014a8:	d102      	bne.n	80014b0 <__aeabi_f2uiz+0x38>
 80014aa:	f04f 30ff 	mov.w	r0, #4294967295
 80014ae:	4770      	bx	lr
 80014b0:	f04f 0000 	mov.w	r0, #0
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop

080014b8 <atexit>:
 80014b8:	4601      	mov	r1, r0
 80014ba:	2000      	movs	r0, #0
 80014bc:	4602      	mov	r2, r0
 80014be:	4603      	mov	r3, r0
 80014c0:	f000 b838 	b.w	8001534 <__register_exitproc>

080014c4 <exit>:
 80014c4:	b508      	push	{r3, lr}
 80014c6:	2100      	movs	r1, #0
 80014c8:	4604      	mov	r4, r0
 80014ca:	f000 f88f 	bl	80015ec <__call_exitprocs>
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <exit+0x1c>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80014d4:	b103      	cbz	r3, 80014d8 <exit+0x14>
 80014d6:	4798      	blx	r3
 80014d8:	4620      	mov	r0, r4
 80014da:	f000 f907 	bl	80016ec <_exit>
 80014de:	bf00      	nop
 80014e0:	080016f4 	.word	0x080016f4

080014e4 <__libc_init_array>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	4e0f      	ldr	r6, [pc, #60]	; (8001524 <__libc_init_array+0x40>)
 80014e8:	4d0f      	ldr	r5, [pc, #60]	; (8001528 <__libc_init_array+0x44>)
 80014ea:	1b76      	subs	r6, r6, r5
 80014ec:	10b6      	asrs	r6, r6, #2
 80014ee:	bf18      	it	ne
 80014f0:	2400      	movne	r4, #0
 80014f2:	d005      	beq.n	8001500 <__libc_init_array+0x1c>
 80014f4:	3401      	adds	r4, #1
 80014f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80014fa:	4798      	blx	r3
 80014fc:	42a6      	cmp	r6, r4
 80014fe:	d1f9      	bne.n	80014f4 <__libc_init_array+0x10>
 8001500:	4e0a      	ldr	r6, [pc, #40]	; (800152c <__libc_init_array+0x48>)
 8001502:	4d0b      	ldr	r5, [pc, #44]	; (8001530 <__libc_init_array+0x4c>)
 8001504:	1b76      	subs	r6, r6, r5
 8001506:	f000 f8f7 	bl	80016f8 <_init>
 800150a:	10b6      	asrs	r6, r6, #2
 800150c:	bf18      	it	ne
 800150e:	2400      	movne	r4, #0
 8001510:	d006      	beq.n	8001520 <__libc_init_array+0x3c>
 8001512:	3401      	adds	r4, #1
 8001514:	f855 3b04 	ldr.w	r3, [r5], #4
 8001518:	4798      	blx	r3
 800151a:	42a6      	cmp	r6, r4
 800151c:	d1f9      	bne.n	8001512 <__libc_init_array+0x2e>
 800151e:	bd70      	pop	{r4, r5, r6, pc}
 8001520:	bd70      	pop	{r4, r5, r6, pc}
 8001522:	bf00      	nop
 8001524:	08001710 	.word	0x08001710
 8001528:	08001710 	.word	0x08001710
 800152c:	08001718 	.word	0x08001718
 8001530:	08001710 	.word	0x08001710

08001534 <__register_exitproc>:
 8001534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001538:	4c25      	ldr	r4, [pc, #148]	; (80015d0 <__register_exitproc+0x9c>)
 800153a:	6825      	ldr	r5, [r4, #0]
 800153c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
 8001540:	4606      	mov	r6, r0
 8001542:	4688      	mov	r8, r1
 8001544:	4692      	mov	sl, r2
 8001546:	4699      	mov	r9, r3
 8001548:	b3cc      	cbz	r4, 80015be <__register_exitproc+0x8a>
 800154a:	6860      	ldr	r0, [r4, #4]
 800154c:	281f      	cmp	r0, #31
 800154e:	dc18      	bgt.n	8001582 <__register_exitproc+0x4e>
 8001550:	1c43      	adds	r3, r0, #1
 8001552:	b17e      	cbz	r6, 8001574 <__register_exitproc+0x40>
 8001554:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001558:	2101      	movs	r1, #1
 800155a:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
 800155e:	f8d4 7188 	ldr.w	r7, [r4, #392]	; 0x188
 8001562:	fa01 f200 	lsl.w	r2, r1, r0
 8001566:	4317      	orrs	r7, r2
 8001568:	2e02      	cmp	r6, #2
 800156a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 800156e:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
 8001572:	d01e      	beq.n	80015b2 <__register_exitproc+0x7e>
 8001574:	3002      	adds	r0, #2
 8001576:	6063      	str	r3, [r4, #4]
 8001578:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
 800157c:	2000      	movs	r0, #0
 800157e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001582:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <__register_exitproc+0xa0>)
 8001584:	b303      	cbz	r3, 80015c8 <__register_exitproc+0x94>
 8001586:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800158a:	f3af 8000 	nop.w
 800158e:	4604      	mov	r4, r0
 8001590:	b1d0      	cbz	r0, 80015c8 <__register_exitproc+0x94>
 8001592:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8001596:	2700      	movs	r7, #0
 8001598:	e880 0088 	stmia.w	r0, {r3, r7}
 800159c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80015a0:	4638      	mov	r0, r7
 80015a2:	2301      	movs	r3, #1
 80015a4:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
 80015a8:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
 80015ac:	2e00      	cmp	r6, #0
 80015ae:	d0e1      	beq.n	8001574 <__register_exitproc+0x40>
 80015b0:	e7d0      	b.n	8001554 <__register_exitproc+0x20>
 80015b2:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
 80015b6:	430a      	orrs	r2, r1
 80015b8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
 80015bc:	e7da      	b.n	8001574 <__register_exitproc+0x40>
 80015be:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
 80015c2:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
 80015c6:	e7c0      	b.n	800154a <__register_exitproc+0x16>
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015d0:	080016f4 	.word	0x080016f4
 80015d4:	00000000 	.word	0x00000000

080015d8 <register_fini>:
 80015d8:	4b02      	ldr	r3, [pc, #8]	; (80015e4 <register_fini+0xc>)
 80015da:	b113      	cbz	r3, 80015e2 <register_fini+0xa>
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <register_fini+0x10>)
 80015de:	f7ff bf6b 	b.w	80014b8 <atexit>
 80015e2:	4770      	bx	lr
 80015e4:	00000000 	.word	0x00000000
 80015e8:	080016c1 	.word	0x080016c1

080015ec <__call_exitprocs>:
 80015ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015f0:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <__call_exitprocs+0xcc>)
 80015f2:	b083      	sub	sp, #12
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80015fc:	4681      	mov	r9, r0
 80015fe:	460e      	mov	r6, r1
 8001600:	9301      	str	r3, [sp, #4]
 8001602:	9b00      	ldr	r3, [sp, #0]
 8001604:	f8d3 7148 	ldr.w	r7, [r3, #328]	; 0x148
 8001608:	b327      	cbz	r7, 8001654 <__call_exitprocs+0x68>
 800160a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800160e:	687c      	ldr	r4, [r7, #4]
 8001610:	1e65      	subs	r5, r4, #1
 8001612:	d40e      	bmi.n	8001632 <__call_exitprocs+0x46>
 8001614:	3401      	adds	r4, #1
 8001616:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800161a:	f04f 0800 	mov.w	r8, #0
 800161e:	b1e6      	cbz	r6, 800165a <__call_exitprocs+0x6e>
 8001620:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8001624:	42b3      	cmp	r3, r6
 8001626:	d018      	beq.n	800165a <__call_exitprocs+0x6e>
 8001628:	3d01      	subs	r5, #1
 800162a:	1c6b      	adds	r3, r5, #1
 800162c:	f1a4 0404 	sub.w	r4, r4, #4
 8001630:	d1f5      	bne.n	800161e <__call_exitprocs+0x32>
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <__call_exitprocs+0xd0>)
 8001634:	b173      	cbz	r3, 8001654 <__call_exitprocs+0x68>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d136      	bne.n	80016aa <__call_exitprocs+0xbe>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d034      	beq.n	80016ac <__call_exitprocs+0xc0>
 8001642:	4638      	mov	r0, r7
 8001644:	f8ca 3000 	str.w	r3, [sl]
 8001648:	f3af 8000 	nop.w
 800164c:	f8da 7000 	ldr.w	r7, [sl]
 8001650:	2f00      	cmp	r7, #0
 8001652:	d1dc      	bne.n	800160e <__call_exitprocs+0x22>
 8001654:	b003      	add	sp, #12
 8001656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6822      	ldr	r2, [r4, #0]
 800165e:	3b01      	subs	r3, #1
 8001660:	42ab      	cmp	r3, r5
 8001662:	bf0c      	ite	eq
 8001664:	607d      	streq	r5, [r7, #4]
 8001666:	f8c4 8000 	strne.w	r8, [r4]
 800166a:	2a00      	cmp	r2, #0
 800166c:	d0dc      	beq.n	8001628 <__call_exitprocs+0x3c>
 800166e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001672:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8001676:	2101      	movs	r1, #1
 8001678:	40a9      	lsls	r1, r5
 800167a:	4219      	tst	r1, r3
 800167c:	d108      	bne.n	8001690 <__call_exitprocs+0xa4>
 800167e:	4790      	blx	r2
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	455b      	cmp	r3, fp
 8001684:	d1bd      	bne.n	8001602 <__call_exitprocs+0x16>
 8001686:	f8da 3000 	ldr.w	r3, [sl]
 800168a:	42bb      	cmp	r3, r7
 800168c:	d0cc      	beq.n	8001628 <__call_exitprocs+0x3c>
 800168e:	e7b8      	b.n	8001602 <__call_exitprocs+0x16>
 8001690:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001694:	4219      	tst	r1, r3
 8001696:	d104      	bne.n	80016a2 <__call_exitprocs+0xb6>
 8001698:	4648      	mov	r0, r9
 800169a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800169e:	4790      	blx	r2
 80016a0:	e7ee      	b.n	8001680 <__call_exitprocs+0x94>
 80016a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80016a6:	4790      	blx	r2
 80016a8:	e7ea      	b.n	8001680 <__call_exitprocs+0x94>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	46ba      	mov	sl, r7
 80016ae:	461f      	mov	r7, r3
 80016b0:	2f00      	cmp	r7, #0
 80016b2:	d1ac      	bne.n	800160e <__call_exitprocs+0x22>
 80016b4:	e7ce      	b.n	8001654 <__call_exitprocs+0x68>
 80016b6:	bf00      	nop
 80016b8:	080016f4 	.word	0x080016f4
 80016bc:	00000000 	.word	0x00000000

080016c0 <__libc_fini_array>:
 80016c0:	b538      	push	{r3, r4, r5, lr}
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <__libc_fini_array+0x24>)
 80016c4:	4d08      	ldr	r5, [pc, #32]	; (80016e8 <__libc_fini_array+0x28>)
 80016c6:	1aed      	subs	r5, r5, r3
 80016c8:	10ac      	asrs	r4, r5, #2
 80016ca:	bf18      	it	ne
 80016cc:	18ed      	addne	r5, r5, r3
 80016ce:	d005      	beq.n	80016dc <__libc_fini_array+0x1c>
 80016d0:	3c01      	subs	r4, #1
 80016d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80016d6:	4798      	blx	r3
 80016d8:	2c00      	cmp	r4, #0
 80016da:	d1f9      	bne.n	80016d0 <__libc_fini_array+0x10>
 80016dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016e0:	f000 b810 	b.w	8001704 <_fini>
 80016e4:	08001718 	.word	0x08001718
 80016e8:	0800171c 	.word	0x0800171c

080016ec <_exit>:
 80016ec:	e7fe      	b.n	80016ec <_exit>
 80016ee:	bf00      	nop
 80016f0:	00000043 	.word	0x00000043

080016f4 <_global_impure_ptr>:
 80016f4:	20000040                                @.. 

080016f8 <_init>:
 80016f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fa:	bf00      	nop
 80016fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016fe:	bc08      	pop	{r3}
 8001700:	469e      	mov	lr, r3
 8001702:	4770      	bx	lr

08001704 <_fini>:
 8001704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001706:	bf00      	nop
 8001708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170a:	bc08      	pop	{r3}
 800170c:	469e      	mov	lr, r3
 800170e:	4770      	bx	lr
